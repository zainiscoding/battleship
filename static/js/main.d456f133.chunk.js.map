{"version":3,"sources":["components/shipFactory.js","components/gameboardFactory.js","components/playerFactory.js","components/DisplayPlayerBoard.jsx","components/DisplayComputerBoard.jsx","components/DisplayPlayerShipDock.jsx","components/PlayerShipDockContainer.jsx","components/DisplayPlacementError.jsx","components/DisplayGame.jsx","components/GameLogicContainer.js","App.js","index.js"],"names":["shipFactory","x","y","shipLength","orientation","shipNumber","positions","i","newPosition","hit","push","getShipLength","getOrientation","a","b","forEach","shipBlock","splice","indexOf","isSunk","every","block","placed","getShipNumber","gameboardFactory","gameBoardArray","playerShipPositions","loopCounter","emptyBlock","empty","placeShip","newShip","shipPositions","shipOverlap","currentPosition","some","position","shipPosition","ship","removeShip","shipIndex","blockId","playerShipPosition","receiveAttack","blockNumber","targetArrayBlock","hitBlock","sunkBlock","sunk","miss","listShips","playerFactory","name","playerBoard","playerShips","undefined","newShip2","newShip3","newShip4","newShip5","getName","makePlay","toAttack","length","randomPosition","Math","floor","random","filteredShips","filter","rotateHorizontalShip","newVerticalShip","rotateVerticalShip","newHorizontalShip","DisplayPlayerBoard","props","id","player","map","index","className","data-x","setX","data-y","setY","data-shipnumber","onClick","removeShipFromBoard","placeChosenShip","DisplayComputerBoard","computerBoardArray","playerAttackHandler","DisplayPlayerShipDock","data-length","data-orientation","chooseShip","rotateShip","PlayerShipDockContainer","mouseMove","DisplayPlacementError","DisplayGame","computer","preparing","placementError","startGame","gameOver","playerWins","restartGame","GameLogicContainer","useState","setPlayer","setComputer","playerTurn","setPlayerTurn","hitPlayerBlocks","setHitPlayerBlocks","setGameOver","setPreparing","placingShip","setPlacingShip","chosenShip","setChosenShip","setShipNumber","setPlacementError","placeAllShipsError","setPlaceAllShipsError","setPlayerWins","useEffect","setTimeout","getPosition","includes","prevState","parseInt","computerAttack","computerShips","arrayItem","e","target","getAttribute","targetBlockX","targetBlockY","stopPropagation","targetShipNumber","parentNode","xGenerator","yGenerator","generateShipPlacement","newComputerState","placeShipArguments","replacementShip","placeComputerShips","targetShip","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAqDeA,EArDK,SAACC,EAAGC,EAAGC,EAAYC,EAAaC,GAClD,IAAIC,EAAY,GAChB,GAAoB,eAAhBF,EACF,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,IAAMC,EAAc,CAAEP,EAAGA,EAAIM,EAAGL,EAAGA,EAAGO,KAAK,GAC3CH,EAAUI,KAAKF,QAGjB,IAAK,IAAID,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACnC,IAAMC,EAAc,CAAEP,EAAGA,EAAGC,EAAGA,EAAIK,EAAGE,KAAK,GAC3CH,EAAUI,KAAKF,GAyBnB,OACS,OAANP,GAAcA,EAAIE,EAAa,IAAsB,eAAhBC,GACrCF,EAAIC,GAAc,GAAqB,aAAhBC,EAEjB,KAGF,CACLO,cA7BoB,kBAAMR,GA8B1BS,eA7BqB,kBAAMR,GA8B3BE,YACAG,IA3BF,SAAaI,EAAGC,GACdR,EAAUS,SAAQ,SAACC,GACbA,EAAUf,IAAMY,GAAKG,EAAUd,IAAMY,GACvCR,EAAUW,OAAOX,EAAUY,QAAQF,GAAY,EAAG,CAChDf,EAAGe,EAAUf,EACbC,EAAGc,EAAUd,EACbO,KAAK,QAsBXU,OAhBF,WACE,OAAOb,EAAUc,OAAM,SAACC,GAAD,OAAWA,EAAMZ,QAgBxCa,QA/BW,EAgCXC,cAjCoB,kBAAMlB,KC6IfmB,EA3JU,WACvB,IAAIC,EAAiB,GACfC,EAAsB,GAExBC,EAAc,GAEG,WACnB,IAD0B,IAAD,WAChBpB,GACP,IAAIN,EAAIM,EAkBR,IAAIqB,EAAa,CAAEC,OAAO,EAAM5B,EAd1BM,EAAI,EACEN,EAAIM,EAAI,GAETN,EAWgCC,GANrCK,EAAI,KAAO,GAAKA,EAAI,IACtBoB,GAAe,GAZX,EAcKA,IAKbF,EAAef,KAAKkB,IArBbrB,EAAI,EAAGA,EAAI,IAAKA,IAAM,EAAtBA,GADU,GA2IrB,MAAO,CACLkB,iBACAC,sBACAI,UApHF,SAAmB7B,EAAGC,EAAGC,EAAYC,EAAaC,GAChD,IAAM0B,EAAU/B,EAAYC,EAAGC,EAAGC,EAAYC,EAAaC,GAE3D,GAAgB,OAAZ0B,EAAkB,CACpB,IAAMC,EAAa,YAAOD,EAAQzB,WAC9B2B,GAAc,EAalB,OAXAP,EAAoBX,SAAQ,SAACmB,GAC3B,GACEF,EAAcG,MACZ,SAACC,GAAD,OACEA,EAASnC,IAAMiC,EAAgBjC,GAC/BmC,EAASlC,IAAMgC,EAAgBhC,KAGnC,OAAQ+B,GAAc,KAGrBA,EAqBIF,GApBPC,EAAcjB,SAAQ,SAACsB,GACrBZ,EAAeV,SAAQ,SAACM,GACtB,IAAML,EAAY,CAChBa,OAAO,EACPS,KAAMP,GAEJM,EAAapC,IAAMoB,EAAMpB,GAAKoC,EAAanC,IAAMmB,EAAMnB,IACzDc,EAAUf,EAAIoB,EAAMpB,EACpBe,EAAUd,EAAImB,EAAMnB,EACpBuB,EAAeR,OACbQ,EAAeP,QAAQG,GACvB,EACAL,GAEFU,EAAoBhB,KAAK2B,WAIxB,KAgFXE,WAzEF,SAAoBC,EAAWC,GAC7B,GAAIhB,EAAegB,GAASH,KAAM,CAChC,IAAMN,EAAgBP,EAAegB,GAASH,KAAKhC,UACnDmB,EAAeV,SAAQ,SAACM,GACtBW,EAAcjB,SAAQ,SAACqB,GACrB,IAAIR,EAAa,CAAEC,OAAO,EAAM5B,EAAGmC,EAASnC,EAAGC,EAAGkC,EAASlC,GACvDmB,EAAMiB,MAAQjB,EAAMiB,KAAKf,kBAAoBiB,GAC/Cf,EAAeR,OAAOQ,EAAeP,QAAQG,GAAQ,EAAGO,GAE1DF,EAAoBX,SAAQ,SAAC2B,GACvBA,IAAuBN,GACzBV,EAAoBT,OAClBS,EAAoBR,QAAQQ,EAAqB,eA8D7DiB,cArDF,SAAuBC,EAAa/B,EAAGC,GACrC,IAAI+B,EAAmBpB,EAAemB,GAElCE,EAAW,CACbjB,OAAO,EACPpB,KAAK,EACL6B,KAAMb,EAAemB,GAAaN,MAEhCS,EAAY,CACdlB,OAAO,EACPmB,MAAM,EACNvC,KAAK,EACL6B,KAAMb,EAAemB,GAAaN,MAIpC,IAAIO,EAAiBP,KAoBnB,OAAOb,EAAeR,OAAO2B,EAAa,EAlC5B,CAAEf,OAAO,EAAOoB,MAAM,EAAMxC,KAAK,IAgB/CoC,EAAiBP,KAAK7B,IAAII,EAAGC,GAEzB+B,EAAiBP,KAAKnB,SAExBM,EAAeV,SAAQ,SAACM,GAClBA,EAAMiB,OAASO,EAAiBP,MAClCb,EAAeR,OAAOQ,EAAeP,QAAQG,GAAQ,EAAG0B,MAM5DtB,EAAeR,OAAO2B,EAAa,EAAGE,IAwB1CI,UAdF,WACEzB,EAAeV,SAAQ,SAACM,GACtB,GAAIA,EAAMiB,KACR,OAAOjB,QC7EA8B,EA9DO,SAACC,GACrB,IACMC,EAAc7B,IAChB8B,EAAc,GAElB,GAAa,WAATF,EAAmB,CACrB,IAAIrB,EAAU/B,OAAYuD,OAAWA,EAAW,EAAG,cAC/CC,EAAWxD,OAAYuD,OAAWA,EAAW,EAAG,cAChDE,EAAWzD,OAAYuD,OAAWA,EAAW,EAAG,cAChDG,EAAW1D,OAAYuD,OAAWA,EAAW,EAAG,cAChDI,EAAW3D,OAAYuD,OAAWA,EAAW,EAAG,cACpDD,EAAY5C,KAAKqB,EAASyB,EAAUC,EAAUC,EAAUC,GAwC1D,MAAO,CACLC,QAnDc,kBAAMR,GAoDpBC,cACAQ,SAZF,SAAkBC,EAAU7D,EAAGC,EAAG6D,GAChC,IAAIC,EAAiBC,KAAKC,MAAsB,IAAhBD,KAAKE,eAC3BZ,IAANtD,EACF6D,EAAShC,UAAU7B,EAAGC,EAAG6D,GAEzBD,EAASnB,cAAcqB,IAQzBzB,WApBF,SAAoBC,GAClB,IAAM4B,EAAgBd,EAAYe,QAChC,SAAC/B,GAAD,OAAUA,IAASgB,EAAYd,MAEjC,OAAQc,EAAW,YAAOc,IAiB1Bd,cACAgB,qBA1CF,SAA8B9B,GAC5B,IAAM+B,EAAkBvE,EACtBsD,EAAYd,GAAWvC,EACvBqD,EAAYd,GAAWtC,EACvBoD,EAAYd,GAAW7B,gBACvB,YAEF,OAAO2C,EAAYrC,OAAOuB,EAAW,EAAG+B,IAoCxCC,mBAjCF,SAA4BhC,GAC1B,IAAMiC,EAAoBzE,EACxBsD,EAAYd,GAAWvC,EACvBqD,EAAYd,GAAWtC,EACvBoD,EAAYd,GAAW7B,gBACvB,cAEF,OAAO2C,EAAYrC,OAAOuB,EAAW,EAAGiC,MCiC7BC,EApEY,SAACC,GAC1B,OACE,qBAAKC,GAAG,sCAAR,SACGD,EAAME,OAAOxB,YAAY5B,eAAeqD,KAAI,SAACzD,EAAO0D,GACnD,OAAI1D,EAAMiB,MAAQjB,EAAM2B,KAEpB,qBAEEgC,UAAU,sBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GALrB,sBACOA,GASA1D,EAAMZ,IAEb,qBAEEuE,UAAU,sBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GALrB,gBACOA,GASA1D,EAAMiB,OAASjB,EAAMZ,IAE5B,qBAEEuE,UAAU,sBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GACnBM,kBAAiBhE,EAAMiB,KAAKf,gBAC5B+D,QAASX,EAAMY,oBAPjB,iBACOR,GAWA1D,EAAM4B,KAEb,qBAAiB+B,UAAU,aAA3B,iBAAUD,GAMZ,oCACI1D,EAAMiB,MACN,qBAEE0C,UAAU,cACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GACnBO,QAASX,EAAMa,iBALVT,WCcNU,EAnEc,SAACd,GAC5B,OACE,qBAAKC,GAAG,wCAAR,SACGD,EAAMe,mBAAmBZ,KAAI,SAACzD,EAAO0D,GACpC,OAAI1D,EAAMiB,MAAQjB,EAAM2B,KAEpB,qBAEEgC,UAAU,mBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GALrB,sBACOA,GASA1D,EAAMZ,IAEb,qBAEEuE,UAAU,mBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GALrB,gBACOA,GASA1D,EAAMiB,OAASjB,EAAMZ,IAE5B,qBAEEuE,UAAU,mBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GACnBO,QAASX,EAAMgB,oBANjB,iBACOZ,GAUA1D,EAAM4B,KAEb,qBAAiB+B,UAAU,aAA3B,iBAAUD,GAMZ,oCACI1D,EAAMiB,MACN,qBAEE0C,UAAU,cACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GACnBO,QAASX,EAAMgB,qBALVZ,WCVNa,EA1Ce,SAACjB,GAC7B,OACE,qBAAKC,GAAG,uBAAR,SACGD,EAAME,OAAOvB,YAAYwB,KAAI,SAACxC,EAAMyC,GACnC,OACE,oCACmB,IAAhBzC,EAAKhB,QACJ,sBAEE0D,UACE,+BAAiC1C,EAAK1B,iBAExCyE,kBAAiBN,EACjBc,cAAavD,EAAK3B,gBAClBmF,mBAAkBxD,EAAK1B,iBACvB0E,QAASX,EAAMoB,WARjB,UAUE,wBAAQT,QAASX,EAAMqB,WAAvB,oBACA,mCACG1D,EAAKhC,UAAUwE,KAAI,SAAC1C,EAAU2C,GAC7B,OACE,sBAEEC,UAAU,oBACVJ,GAAIG,EACJE,SAAQN,EAAMO,KAAKH,GACnBI,SAAQR,EAAMS,KAAKL,GALrB,sBAOYA,IANLA,UAdRA,WCONkB,EAbiB,SAACtB,GAC/B,OACE,cAAC,EAAD,CACEE,OAAQF,EAAME,OACdK,KAAMP,EAAMO,KACZE,KAAMT,EAAMS,KACZW,WAAYpB,EAAMoB,WAClBC,WAAYrB,EAAMqB,WAClBE,UAAWvB,EAAMuB,aCFRC,EARe,SAACxB,GAC7B,OACE,qBAAKC,GAAG,gBAAR,6ECoEWwB,EAjEK,SAACzB,GAEnB,SAASO,EAAKH,GAEZ,OAAIA,EAAQ,EACEA,EAAQ,GAFdA,EAUV,SAASK,EAAKL,GAEZ,OAAIA,EAAQ,GACE,EAGA,EADAd,KAAKC,MAAMa,EAAQ,IAKnC,OACE,sBAAKH,GAAG,eAAR,UACE,sBAAKA,GAAG,gBAAR,UACE,cAAC,EAAD,CACEC,OAAQF,EAAME,OACdK,KAAMA,EACNE,KAAMA,EACNI,gBAAiBb,EAAMa,gBACvBD,oBAAqBZ,EAAMY,sBAE7B,cAAC,EAAD,CACEG,mBAAoBf,EAAM0B,SAAShD,YAAY5B,eAC/CyD,KAAMA,EACNE,KAAMA,EACNO,oBAAqBhB,EAAMgB,oBAC3BH,gBAAiBb,EAAMa,qBAG1Bb,EAAM2B,WACL,qCACG3B,EAAM4B,gBAAkB,cAAC,EAAD,IACzB,cAAC,EAAD,CACE1B,OAAQF,EAAME,OACdK,KAAMA,EACNE,KAAMA,EACNW,WAAYpB,EAAMoB,WAClBC,WAAYrB,EAAMqB,aAEpB,wBAAQV,QAASX,EAAM6B,UAAvB,2BAGH7B,EAAM8B,UACL,qCACG9B,EAAM+B,YAAc,4CACnB/B,EAAM+B,YAAc,4CACtB,wBAAQpB,QAASX,EAAMgC,YAAvB,4BC4PKC,EAvTY,SAACjC,GAAW,IAAD,EACRkC,mBAAS1D,EAAc,WADf,mBAC7B0B,EAD6B,KACrBiC,EADqB,OAEJD,mBAAS1D,EAAc,aAFnB,mBAE7BkD,EAF6B,KAEnBU,EAFmB,OAGAF,oBAAS,GAHT,mBAG7BG,EAH6B,KAGjBC,EAHiB,OAIUJ,mBAAS,IAJnB,mBAI7BK,EAJ6B,KAIZC,EAJY,OAKJN,oBAAS,GALL,mBAK7BJ,EAL6B,KAKnBW,EALmB,OAMFP,oBAAS,GANP,mBAM7BP,EAN6B,KAMlBe,EANkB,OAOER,oBAAS,GAPX,mBAO7BS,EAP6B,KAOhBC,EAPgB,OAQAV,qBARA,mBAQ7BW,EAR6B,KAQjBC,EARiB,OASAZ,mBAAS,GATT,mBAS7BxG,EAT6B,KASjBqH,EATiB,OAUQb,oBAAS,GAVjB,mBAU7BN,EAV6B,KAUboB,EAVa,OAWgBd,oBAAS,GAXzB,mBAW7Be,EAX6B,KAWTC,EAXS,OAYAhB,qBAZA,mBAY7BH,GAZ6B,KAYjBoB,GAZiB,KAmSpC,OAnEAC,qBAAU,WA6BHf,GAEHgB,YAAW,YA9Bb,WACE,IAAI5F,EAAW,EAGf,SAAS6F,IACP,OAAQ7F,EAAW6B,KAAKC,MAAsB,IAAhBD,KAAKE,UAKrC,IAHAgD,EAAmB,GAAD,mBAAKD,GAAL,CAAsBe,OAItCf,EAAgBgB,SAAS9F,IACzB8E,EAAgBnD,OAAS,KAEzBoD,EAAmB,GAAD,mBAAKD,GAAL,CAAsBe,OAG1CnB,GAAU,SAACqB,GAMT,OALAA,EAAU9E,YAAYV,cACpBP,EACAgG,SAASD,EAAU9E,YAAY5B,eAAeW,GAAUnC,GACxDmI,SAASD,EAAU9E,YAAY5B,eAAeW,GAAUlC,IAEnD,eAAKiI,MAGdlB,GAAc,GAKZoB,KACC,KAGJ,CAACrB,IAGJe,qBAAU,WACR,IAAKzB,EAAW,CACd,IAAMgC,EAAgB,GAChBhF,EAAc,GACpB+C,EAAShD,YAAY5B,eAAeV,SAAQ,SAACwH,GACvCA,EAAUjG,OAASgG,EAAcJ,SAASK,EAAUjG,OACtDgG,EAAc5H,KAAK6H,EAAUjG,SAIjCuC,EAAOxB,YAAY5B,eAAeV,SAAQ,SAACwH,GACrCA,EAAUjG,OAASgB,EAAY4E,SAASK,EAAUjG,OACpDgB,EAAY5C,KAAK6H,EAAUjG,SAI3BgG,EAAclH,OAAM,SAACkB,GAAD,OAAUA,EAAKnB,cACrC2G,IAAc,GACdV,GAAY,IAGV9D,EAAYlC,OAAM,SAACkB,GAAD,OAAUA,EAAKnB,cACnC2G,IAAc,GACdV,GAAY,OAGf,CAACf,EAAUC,EAAWzB,EAAOxB,YAAY5B,iBAG1C,cAAC,EAAD,CACEoD,OAAQA,EACRwB,SAAUA,EACVV,oBAnLJ,SAA6B6C,GACvBxB,IAAeV,GACjBS,GAAY,SAACoB,GAOX,OANAA,EAAU9E,YAAYV,cACpB6F,EAAEC,OAAO7D,GACTwD,SAASI,EAAEC,OAAOC,aAAa,WAC/BN,SAASI,EAAEC,OAAOC,aAAa,YAEjCzB,GAAc,GACP,eAAKkB,OA2KdpC,WAtKJ,SAAoByC,GAClB,IAAMhB,EAAa,CACjBrH,WAAYiI,SAASI,EAAEC,OAAOC,aAAa,gBAC3CtI,YAAaoI,EAAEC,OAAOC,aAAa,qBAErCnB,GAAe,GACfG,EAAcU,SAASI,EAAEC,OAAOC,aAAa,qBAC7CjB,EAAcD,IAgKZhC,gBA7JJ,SAAyBgD,GACnBlB,GACFR,GAAU,SAACqB,GACT,IAAMQ,EAAeP,SAASI,EAAEC,OAAOC,aAAa,WAC9CE,EAAeR,SAASI,EAAEC,OAAOC,aAAa,WAepD,OAPmB,IAPFP,EAAU9E,YAAYvB,UACrC6G,EACAC,EACApB,EAAWrH,WACXqH,EAAWpH,YACXC,IAGAwE,EAAOvB,YAAYjD,GAAYiB,QAAS,EACxCqG,GAAkB,GAClBJ,GAAe,IAEfI,GAAkB,GAEb,eAAKQ,OA2IdnC,WA1HJ,SAAoBwC,GAElB,GADAA,EAAEK,mBACGvB,EAAa,CAChB,IAAMwB,EAAmBN,EAAEC,OAAOM,WAAWL,aAC3C,mBAEItI,EAAcoI,EAAEC,OAAOM,WAAWL,aAAa,oBAGjD5B,EADY,eAAhB1G,EACc,SAAC+H,GAET,OADAA,EAAU7D,qBAAqBwE,GACxB,eAAKX,IAEJ,SAACA,GAET,OADAA,EAAU3D,mBAAmBsE,GACtB,eAAKX,OA4GlB7B,UAAWA,EACXE,UAxGJ,WACE,IAAMlD,EAAc,IAvLtB,WAA+B,IAAD,UAC5B,SAAS0F,IAEP,OADQ/E,KAAKC,MAAsB,GAAhBD,KAAKE,UAI1B,SAAS8E,IAEP,OADQhF,KAAKC,MAAsB,GAAhBD,KAAKE,UAc1B,SAAS+E,EAAsB/I,GAQ7B,IAPA,IAAM4B,EAAU,CACd9B,EAAG+I,IACH9I,EAAG+I,IACHlF,OAAQ5D,EACRC,YAdsB6D,KAAKC,MAAsB,GAAhBD,KAAKE,UAChB,IAAM,EACrB,aAEA,YAcQ,OAAdpC,EAAQ9B,GACP8B,EAAQ9B,EAAIE,EAAa,IACD,eAAxB4B,EAAQ3B,aACT2B,EAAQ7B,EAAIC,GAAc,GAA6B,aAAxB4B,EAAQ3B,kBAC5BmD,IAAZxB,GAEAA,EAAQ9B,EAAI+I,IACZjH,EAAQ7B,EAAI+I,IAEd,OAAOlH,EAGT,IAAMA,EAAUmH,EAAsB,GAChC1F,EAAW0F,EAAsB,GACjCzF,EAAWyF,EAAsB,GACjCxF,EAAWwF,EAAsB,GACjCvF,EAAWuF,EAAsB,GAEnCC,EAAmB9C,EAEvB,SAAS+C,EAAmB9G,GAC1B,MAAO,CAACA,EAAKrC,EAAGqC,EAAKpC,EAAGoC,EAAKyB,OAAQzB,EAAKlC,aAuBxB,EApBD,EAAA+I,EAAiB9F,aAAYvB,UAA7B,oBACdsH,EAAmBrH,MAGL,EAAAoH,EAAiB9F,aAAYvB,UAA7B,oBACdsH,EAAmB5F,MAGL,EAAA2F,EAAiB9F,aAAYvB,UAA7B,oBACdsH,EAAmB3F,MAGL,EAAA0F,EAAiB9F,aAAYvB,UAA7B,oBACdsH,EAAmB1F,MAGL,EAAAyF,EAAiB9F,aAAYvB,UAA7B,oBACdsH,EAAmBzF,MAYZ5C,SAAQ,SAACuB,GACnB,MAAgB,IAATA,GAAe,CACpB,IAAI+G,EAAkBH,EAAsB5G,EAAK3B,iBACjD2B,EAAO6G,EAAiB9F,YAAYvB,UAClCuH,EAAgBpJ,EAChBoJ,EAAgBnJ,EAChBmJ,EAAgBtF,OAChBsF,EAAgBjJ,aAElB2G,EAAYoC,OAIhBpC,EAAYoC,GACZpC,GAAY,SAACoC,GACX,OAAO,eAAKA,MAsFdG,GAEAzE,EAAOxB,YAAY5B,eAAeV,SAAQ,SAACwH,GACrCA,EAAUjG,OAASgB,EAAY4E,SAASK,EAAUjG,OACpDgB,EAAY5C,KAAK6H,EAAUjG,SAG3BgE,GAAoC,IAAvBhD,EAAYS,QAC3BsD,GAAa,GACbQ,GAAsB,IAEtBA,GAAsB,IA4FtBlB,YAxFJ,WACEU,GAAa,GACbJ,GAAc,GACdE,EAAmB,IACnBC,GAAY,GACZU,GAAc,IACdhB,EAAU3D,EAAc,WACxB4D,EAAY5D,EAAc,cAkFxBoC,oBA1IJ,SAA6BiD,GACvBlC,IAAcgB,GAChBR,GAAU,SAACqB,GACT,IAAMoB,EAAanB,SAASI,EAAEC,OAAOC,aAAa,oBAC5CjG,EAAU2F,SAASI,EAAEC,OAAO7D,IAGlC,OAFAC,EAAOvB,YAAYiG,GAAYjI,QAAS,EACxCuD,EAAOxB,YAAYd,WAAWgH,EAAY9G,GACnC,eAAK0F,OAoId5B,eAAgBA,EAChBqB,mBAAoBA,EACpBlB,WAAYA,GACZD,SAAUA,K,YC1SD+C,MARf,WACE,OACE,qBAAKxE,UAAU,MAAf,SACE,cAAC,EAAD,OCHNyE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d456f133.chunk.js","sourcesContent":["const shipFactory = (x, y, shipLength, orientation, shipNumber) => {\n  let positions = [];\n  if (orientation === 'horizontal') {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x + i, y: y, hit: false };\n      positions.push(newPosition);\n    }\n  } else {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x, y: y - i, hit: false };\n      positions.push(newPosition);\n    }\n  }\n\n  const getShipLength = () => shipLength;\n  const getOrientation = () => orientation;\n  const getShipNumber = () => shipNumber;\n  let placed = false;\n\n  function hit(a, b) {\n    positions.forEach((shipBlock) => {\n      if (shipBlock.x === a && shipBlock.y === b) {\n        positions.splice(positions.indexOf(shipBlock), 1, {\n          x: shipBlock.x,\n          y: shipBlock.y,\n          hit: true,\n        });\n      }\n    });\n  }\n\n  function isSunk() {\n    return positions.every((block) => block.hit);\n  }\n\n  if (\n    (x !== null && x + shipLength > 10 && orientation === 'horizontal') ||\n    (y - shipLength < -1 && orientation === 'vertical')\n  ) {\n    return null;\n  }\n\n  return {\n    getShipLength,\n    getOrientation,\n    positions,\n    hit,\n    isSunk,\n    placed,\n    getShipNumber,\n  };\n};\n\nexport default shipFactory;\n","import shipFactory from './shipFactory';\n\nconst gameboardFactory = () => {\n  let gameBoardArray = [];\n  const playerShipPositions = [];\n\n  let loopCounter = 0;\n\n  const pushToBoard = (() => {\n    for (let i = 0; i < 100; i++) {\n      let x = i;\n      let y = 9;\n\n      function setX() {\n        if (i > 9) {\n          return (x = i % 10);\n        } else {\n          return x;\n        }\n      }\n\n      function setY() {\n        if (i % 10 === 0 && i > 9) {\n          loopCounter += 1;\n        }\n        return y - loopCounter;\n      }\n\n      let emptyBlock = { empty: true, x: setX(), y: setY() };\n\n      gameBoardArray.push(emptyBlock);\n    }\n  })();\n\n  function placeShip(x, y, shipLength, orientation, shipNumber) {\n    const newShip = shipFactory(x, y, shipLength, orientation, shipNumber);\n\n    if (newShip !== null) {\n      const shipPositions = [...newShip.positions];\n      let shipOverlap = false;\n\n      playerShipPositions.forEach((currentPosition) => {\n        if (\n          shipPositions.some(\n            (position) =>\n              position.x === currentPosition.x &&\n              position.y === currentPosition.y\n          )\n        ) {\n          return (shipOverlap = true);\n        }\n      });\n      if (!shipOverlap) {\n        shipPositions.forEach((shipPosition) => {\n          gameBoardArray.forEach((block) => {\n            const shipBlock = {\n              empty: false,\n              ship: newShip,\n            };\n            if (shipPosition.x === block.x && shipPosition.y === block.y) {\n              shipBlock.x = block.x;\n              shipBlock.y = block.y;\n              gameBoardArray.splice(\n                gameBoardArray.indexOf(block),\n                1,\n                shipBlock\n              );\n              playerShipPositions.push(shipPosition);\n            }\n          });\n        });\n        return true;\n      } else {\n        return newShip;\n      }\n    }\n  }\n\n  function removeShip(shipIndex, blockId) {\n    if (gameBoardArray[blockId].ship) {\n      const shipPositions = gameBoardArray[blockId].ship.positions;\n      gameBoardArray.forEach((block) => {\n        shipPositions.forEach((position) => {\n          let emptyBlock = { empty: true, x: position.x, y: position.y };\n          if (block.ship && block.ship.getShipNumber() === shipIndex) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, emptyBlock);\n          }\n          playerShipPositions.forEach((playerShipPosition) => {\n            if (playerShipPosition === position) {\n              playerShipPositions.splice(\n                playerShipPositions.indexOf(playerShipPositions, 1)\n              );\n            }\n          });\n        });\n      });\n    }\n  }\n\n  function receiveAttack(blockNumber, a, b) {\n    let targetArrayBlock = gameBoardArray[blockNumber];\n    let missBlock = { empty: false, miss: true, hit: false };\n    let hitBlock = {\n      empty: false,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n    let sunkBlock = {\n      empty: false,\n      sunk: true,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n\n    //If you click a ship...\n    if (targetArrayBlock.ship) {\n      //Hit it!\n      targetArrayBlock.ship.hit(a, b);\n      //And if that ship is sunk by you hittting it...\n      if (targetArrayBlock.ship.isSunk()) {\n        //Replace all relevant blocks with 'sunk ship' blocks\n        gameBoardArray.forEach((block) => {\n          if (block.ship === targetArrayBlock.ship) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, sunkBlock);\n          }\n        });\n\n        //Else just replace the block you hit with a 'hit' block\n      } else {\n        gameBoardArray.splice(blockNumber, 1, hitBlock);\n      }\n    }\n\n    //Else if you missed, replace the clicked block with a 'miss' block\n    else {\n      return gameBoardArray.splice(blockNumber, 1, missBlock);\n    }\n  }\n\n  function listShips() {\n    gameBoardArray.forEach((block) => {\n      if (block.ship) {\n        return block;\n      }\n    });\n  }\n\n  return {\n    gameBoardArray,\n    playerShipPositions,\n    placeShip,\n    removeShip,\n    receiveAttack,\n    listShips,\n  };\n};\n\nexport default gameboardFactory;\n","import gameboardFactory from './gameboardFactory';\nimport shipFactory from './shipFactory';\n\nconst playerFactory = (name) => {\n  const getName = () => name;\n  const playerBoard = gameboardFactory();\n  let playerShips = [];\n\n  if (name === 'Player') {\n    let newShip = shipFactory(undefined, undefined, 5, 'horizontal');\n    let newShip2 = shipFactory(undefined, undefined, 4, 'horizontal');\n    let newShip3 = shipFactory(undefined, undefined, 3, 'horizontal');\n    let newShip4 = shipFactory(undefined, undefined, 3, 'horizontal');\n    let newShip5 = shipFactory(undefined, undefined, 2, 'horizontal');\n    playerShips.push(newShip, newShip2, newShip3, newShip4, newShip5);\n  }\n\n  //It's possible to consolidate the following two rotation functions into one, but requires React to not run in Strict Mode.\n  function rotateHorizontalShip(shipIndex) {\n    const newVerticalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'vertical'\n    );\n    return playerShips.splice(shipIndex, 1, newVerticalShip);\n  }\n\n  function rotateVerticalShip(shipIndex) {\n    const newHorizontalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'horizontal'\n    );\n    return playerShips.splice(shipIndex, 1, newHorizontalShip);\n  }\n\n  function removeShip(shipIndex) {\n    const filteredShips = playerShips.filter(\n      (ship) => ship !== playerShips[shipIndex]\n    );\n    return (playerShips = [...filteredShips]);\n  }\n\n  function makePlay(toAttack, x, y, length) {\n    let randomPosition = Math.floor(Math.random() * 100);\n    if (x !== undefined) {\n      toAttack.placeShip(x, y, length);\n    } else {\n      toAttack.receiveAttack(randomPosition);\n    }\n  }\n\n  return {\n    getName,\n    playerBoard,\n    makePlay,\n    removeShip,\n    playerShips,\n    rotateHorizontalShip,\n    rotateVerticalShip,\n  };\n};\n\nexport default playerFactory;\n","const DisplayPlayerBoard = (props) => {\n  return (\n    <div id='board-wrapper__player-board-wrapper'>\n      {props.player.playerBoard.gameBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='friendly-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Sunk Ship\n            </div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='friendly-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Hit\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='friendly-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              data-shipnumber={block.ship.getShipNumber()}\n              onClick={props.removeShipFromBoard}\n            >\n              Ship\n            </div>\n          );\n        } else if (block.miss) {\n          return (\n            <div key={index} className='miss-block'>\n              Miss\n            </div>\n          );\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.placeChosenShip}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerBoard;\n","const DisplayComputerBoard = (props) => {\n  return (\n    <div id='board-wrapper__computer-board-wrapper'>\n      {props.computerBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Sunk Ship\n            </div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Hit\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              onClick={props.playerAttackHandler}\n            >\n              Ship\n            </div>\n          );\n        } else if (block.miss) {\n          return (\n            <div key={index} className='miss-block'>\n              Miss\n            </div>\n          );\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.playerAttackHandler}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayComputerBoard;\n","const DisplayPlayerShipDock = (props) => {\n  return (\n    <div id='player-ships-wrapper'>\n      {props.player.playerShips.map((ship, index) => {\n        return (\n          <>\n            {ship.placed === false && (\n              <div\n                key={index}\n                className={\n                  'player-ships-wrapper__ship--' + ship.getOrientation()\n                }\n                data-shipnumber={index}\n                data-length={ship.getShipLength()}\n                data-orientation={ship.getOrientation()}\n                onClick={props.chooseShip}\n              >\n                <button onClick={props.rotateShip}>Rotate</button>\n                <>\n                  {ship.positions.map((position, index) => {\n                    return (\n                      <div\n                        key={index}\n                        className='player-ship-block'\n                        id={index}\n                        data-x={props.setX(index)}\n                        data-y={props.setY(index)}\n                      >\n                        position {index}\n                      </div>\n                    );\n                  })}\n                </>\n              </div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerShipDock;\n","import DisplayPlayerShipDock from './DisplayPlayerShipDock';\n\nconst PlayerShipDockContainer = (props) => {\n  return (\n    <DisplayPlayerShipDock\n      player={props.player}\n      setX={props.setX}\n      setY={props.setY}\n      chooseShip={props.chooseShip}\n      rotateShip={props.rotateShip}\n      mouseMove={props.mouseMove}\n    />\n  );\n};\n\nexport default PlayerShipDockContainer;\n","const DisplayPlacementError = (props) => {\n  return (\n    <div id='error-wrapper'>\n      Unable to place ship. Check for collision and available space.\n    </div>\n  );\n};\n\nexport default DisplayPlacementError;\n","import DisplayPlayerBoard from './DisplayPlayerBoard';\nimport DisplayComputerBoard from './DisplayComputerBoard';\nimport PlayerShipDockContainer from './PlayerShipDockContainer';\nimport DisplayPlacementError from './DisplayPlacementError';\n\nconst DisplayGame = (props) => {\n  //Used to set data values of the blocks\n  function setX(index) {\n    let x = index;\n    if (index > 9) {\n      return (x = index % 10);\n    } else {\n      return x;\n    }\n  }\n\n  //Same as above\n  //Thanks to 'cyborg/human#5133' on TOP Discord for the much cleaner version of this function!\n  function setY(index) {\n    let y = 9;\n    if (index > 89) {\n      return (y = 0);\n    } else {\n      const val = Math.floor(index / 10);\n      return (y = 9 - val);\n    }\n  }\n\n  return (\n    <div id='game-wrapper'>\n      <div id='board-wrapper'>\n        <DisplayPlayerBoard\n          player={props.player}\n          setX={setX}\n          setY={setY}\n          placeChosenShip={props.placeChosenShip}\n          removeShipFromBoard={props.removeShipFromBoard}\n        />\n        <DisplayComputerBoard\n          computerBoardArray={props.computer.playerBoard.gameBoardArray}\n          setX={setX}\n          setY={setY}\n          playerAttackHandler={props.playerAttackHandler}\n          placeChosenShip={props.placeChosenShip}\n        />\n      </div>\n      {props.preparing && (\n        <>\n          {props.placementError && <DisplayPlacementError />}\n          <PlayerShipDockContainer\n            player={props.player}\n            setX={setX}\n            setY={setY}\n            chooseShip={props.chooseShip}\n            rotateShip={props.rotateShip}\n          />\n          <button onClick={props.startGame}>Start game</button>\n        </>\n      )}\n      {props.gameOver && (\n        <>\n          {props.playerWins && <div>You win!</div>}\n          {!props.playerWins && <div>You lose!</div>}\n          <button onClick={props.restartGame}>Restart</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DisplayGame;\n","import playerFactory from './playerFactory';\nimport DisplayGame from './DisplayGame';\nimport { useCallback, useEffect, useState } from 'react';\n\nconst GameLogicContainer = (props) => {\n  const [player, setPlayer] = useState(playerFactory('Player'));\n  const [computer, setComputer] = useState(playerFactory('Computer'));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [hitPlayerBlocks, setHitPlayerBlocks] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [preparing, setPreparing] = useState(true);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [chosenShip, setChosenShip] = useState();\n  const [shipNumber, setShipNumber] = useState(0);\n  const [placementError, setPlacementError] = useState(false);\n  const [placeAllShipsError, setPlaceAllShipsError] = useState(false);\n  const [playerWins, setPlayerWins] = useState();\n\n  function placeComputerShips() {\n    function xGenerator() {\n      let x = Math.floor(Math.random() * 10);\n      return x;\n    }\n\n    function yGenerator() {\n      let y = Math.floor(Math.random() * 10);\n      return y;\n    }\n\n    function orientationGenerator() {\n      let orientationNumber = Math.floor(Math.random() * 10);\n      if (orientationNumber % 2 === 0) {\n        return 'horizontal';\n      } else {\n        return 'vertical';\n      }\n    }\n\n    //Generate positions for a new ship\n    function generateShipPlacement(shipLength) {\n      const newShip = {\n        x: xGenerator(),\n        y: yGenerator(),\n        length: shipLength,\n        orientation: orientationGenerator(),\n      };\n      //Prevent impossible ships (going off grid)\n      while (\n        (newShip.x !== null &&\n          newShip.x + shipLength > 10 &&\n          newShip.orientation === 'horizontal') ||\n        (newShip.y - shipLength < -1 && newShip.orientation === 'vertical') ||\n        newShip === undefined\n      ) {\n        newShip.x = xGenerator();\n        newShip.y = yGenerator();\n      }\n      return newShip;\n    }\n\n    const newShip = generateShipPlacement(2);\n    const newShip2 = generateShipPlacement(3);\n    const newShip3 = generateShipPlacement(3);\n    const newShip4 = generateShipPlacement(4);\n    const newShip5 = generateShipPlacement(5);\n\n    let newComputerState = computer;\n\n    function placeShipArguments(ship) {\n      return [ship.x, ship.y, ship.length, ship.orientation];\n    }\n\n    const placeShip1 = newComputerState.playerBoard.placeShip(\n      ...placeShipArguments(newShip)\n    );\n\n    const placeShip2 = newComputerState.playerBoard.placeShip(\n      ...placeShipArguments(newShip2)\n    );\n\n    const placeShip3 = newComputerState.playerBoard.placeShip(\n      ...placeShipArguments(newShip3)\n    );\n\n    const placeShip4 = newComputerState.playerBoard.placeShip(\n      ...placeShipArguments(newShip4)\n    );\n\n    const placeShip5 = newComputerState.playerBoard.placeShip(\n      ...placeShipArguments(newShip5)\n    );\n\n    const placedShips = [\n      placeShip1,\n      placeShip2,\n      placeShip3,\n      placeShip4,\n      placeShip5,\n    ];\n\n    //If a ship overlaps another ship, create a new one\n    placedShips.forEach((ship) => {\n      while (ship !== true) {\n        let replacementShip = generateShipPlacement(ship.getShipLength());\n        ship = newComputerState.playerBoard.placeShip(\n          replacementShip.x,\n          replacementShip.y,\n          replacementShip.length,\n          replacementShip.orientation\n        );\n        setComputer(newComputerState);\n      }\n    });\n\n    setComputer(newComputerState);\n    setComputer((newComputerState) => {\n      return { ...newComputerState };\n    });\n  }\n\n  function playerAttackHandler(e) {\n    if (playerTurn && !preparing) {\n      setComputer((prevState) => {\n        prevState.playerBoard.receiveAttack(\n          e.target.id,\n          parseInt(e.target.getAttribute('data-x')),\n          parseInt(e.target.getAttribute('data-y'))\n        );\n        setPlayerTurn(false);\n        return { ...prevState };\n      });\n    }\n  }\n\n  function chooseShip(e) {\n    const chosenShip = {\n      shipLength: parseInt(e.target.getAttribute('data-length')),\n      orientation: e.target.getAttribute('data-orientation'),\n    };\n    setPlacingShip(true);\n    setShipNumber(parseInt(e.target.getAttribute('data-shipnumber')));\n    setChosenShip(chosenShip);\n  }\n\n  function placeChosenShip(e) {\n    if (placingShip) {\n      setPlayer((prevState) => {\n        const targetBlockX = parseInt(e.target.getAttribute('data-x'));\n        const targetBlockY = parseInt(e.target.getAttribute('data-y'));\n        let placedShip = prevState.playerBoard.placeShip(\n          targetBlockX,\n          targetBlockY,\n          chosenShip.shipLength,\n          chosenShip.orientation,\n          shipNumber\n        );\n        if (placedShip === true) {\n          player.playerShips[shipNumber].placed = true;\n          setPlacementError(false);\n          setPlacingShip(false);\n        } else {\n          setPlacementError(true);\n        }\n        return { ...prevState };\n      });\n    }\n  }\n\n  function removeShipFromBoard(e) {\n    if (preparing && !placingShip) {\n      setPlayer((prevState) => {\n        const targetShip = parseInt(e.target.getAttribute('data-shipnumber'));\n        const blockId = parseInt(e.target.id);\n        player.playerShips[targetShip].placed = false;\n        player.playerBoard.removeShip(targetShip, blockId);\n        return { ...prevState };\n      });\n    }\n  }\n\n  function rotateShip(e) {\n    e.stopPropagation();\n    if (!placingShip) {\n      const targetShipNumber = e.target.parentNode.getAttribute(\n        'data-shipnumber'\n      );\n      const orientation = e.target.parentNode.getAttribute('data-orientation');\n\n      orientation === 'horizontal'\n        ? setPlayer((prevState) => {\n            prevState.rotateHorizontalShip(targetShipNumber);\n            return { ...prevState };\n          })\n        : setPlayer((prevState) => {\n            prevState.rotateVerticalShip(targetShipNumber);\n            return { ...prevState };\n          });\n    }\n  }\n\n  function startGame() {\n    const playerShips = [];\n    placeComputerShips();\n\n    player.playerBoard.gameBoardArray.forEach((arrayItem) => {\n      if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n        playerShips.push(arrayItem.ship);\n      }\n    });\n    if (preparing && playerShips.length === 5) {\n      setPreparing(false);\n      setPlaceAllShipsError(false);\n    } else {\n      setPlaceAllShipsError(true);\n    }\n  }\n\n  function restartGame() {\n    setPreparing(true);\n    setPlayerTurn(true);\n    setHitPlayerBlocks([]);\n    setGameOver(false);\n    setPlayerWins('');\n    setPlayer(playerFactory('Player'));\n    setComputer(playerFactory('Computer'));\n  }\n\n  //The computer takes a turn whenever playerTurn changes (ie. whenever attacked)\n  useEffect(() => {\n    function computerAttack() {\n      let position = 0;\n\n      //Choose a random position to attack\n      function getPosition() {\n        return (position = Math.floor(Math.random() * 100));\n      }\n      setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n\n      //Prevents repeat hits\n      while (\n        hitPlayerBlocks.includes(position) &&\n        hitPlayerBlocks.length < 100\n      ) {\n        setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n      }\n\n      setPlayer((prevState) => {\n        prevState.playerBoard.receiveAttack(\n          position,\n          parseInt(prevState.playerBoard.gameBoardArray[position].x),\n          parseInt(prevState.playerBoard.gameBoardArray[position].y)\n        );\n        return { ...prevState };\n      });\n\n      setPlayerTurn(true);\n    }\n    if (!playerTurn) {\n      //Timeout used to give the computer some fake thinking time\n      setTimeout(function () {\n        computerAttack();\n      }, 0);\n    }\n    // eslint-disable-next-line\n  }, [playerTurn]);\n\n  //Checks for game over\n  useEffect(() => {\n    if (!preparing) {\n      const computerShips = [];\n      const playerShips = [];\n      computer.playerBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !computerShips.includes(arrayItem.ship)) {\n          computerShips.push(arrayItem.ship);\n        }\n      });\n\n      player.playerBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n          playerShips.push(arrayItem.ship);\n        }\n      });\n\n      if (computerShips.every((ship) => ship.isSunk())) {\n        setPlayerWins(true);\n        setGameOver(true);\n      }\n\n      if (playerShips.every((ship) => ship.isSunk())) {\n        setPlayerWins(false);\n        setGameOver(true);\n      }\n    }\n  }, [computer, preparing, player.playerBoard.gameBoardArray]);\n\n  return (\n    <DisplayGame\n      player={player}\n      computer={computer}\n      playerAttackHandler={playerAttackHandler}\n      chooseShip={chooseShip}\n      placeChosenShip={placeChosenShip}\n      rotateShip={rotateShip}\n      preparing={preparing}\n      startGame={startGame}\n      restartGame={restartGame}\n      removeShipFromBoard={removeShipFromBoard}\n      placementError={placementError}\n      placeAllShipsError={placeAllShipsError}\n      playerWins={playerWins}\n      gameOver={gameOver}\n    />\n  );\n};\n\nexport default GameLogicContainer;\n","import GameLogicContainer from './components/GameLogicContainer';\nimport './styles/reset.css';\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <GameLogicContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}