{"version":3,"sources":["factories/shipFactory.js","factories/playerFactory.js","helper_functions/createGameBoardArray.js","helper_functions/placeShipsHelper.js","factories/gameboardFactory.js","components/display_components/DisplayPlayerBoard.jsx","components/display_components/DisplayComputerBoard.jsx","components/display_components/DisplayPlayerShipDock.jsx","components/PlayerShipDockContainer.jsx","components/display_components/DisplayPlacementError.jsx","components/display_components/DisplayPlaceAllShipsError.jsx","components/display_components/DisplayGame.jsx","components/GameLogicContainer.js","App.js","index.js"],"names":["shipFactory","x","y","shipLength","orientation","shipNumber","positions","i","newPosition","hit","push","getShipLength","getOrientation","a","b","forEach","shipBlock","splice","indexOf","isSunk","every","block","placed","getShipNumber","playerFactory","name","playerShips","newShip","undefined","newShip2","newShip3","newShip4","newShip5","getName","rotateHorizontalShip","shipIndex","newVerticalShip","rotateVerticalShip","newHorizontalShip","createGameBoardArray","gameBoardArray","loopCounter","emptyBlock","empty","xGenerator","Math","floor","random","yGenerator","orientationGenerator","generateShipPlacement","length","placeShipsHelper","board","placeShipArguments","ship","placeShip","replacementShip","gameboardFactory","playerShipPositions","shipPositions","shipOverlap","currentPosition","some","position","shipPosition","removeShip","blockId","playerShipPosition","receiveAttack","blockNumber","targetArrayBlock","hitBlock","sunkBlock","sunk","miss","placeShips","this","DisplayPlayerBoard","props","id","preparing","playerBoard","map","index","className","data-x","setX","data-y","setY","data-shipnumber","onClick","removeShipFromBoard","placeChosenShip","DisplayComputerBoard","computerBoardArray","playerAttackHandler","DisplayPlayerShipDock","player","data-length","data-orientation","chooseShip","rotateShip","PlayerShipDockContainer","mouseMove","DisplayPlacementError","DisplayPlaceAllShipsError","DisplayGame","placementError","placeAllShipsError","placeRandomShips","startGame","gameOver","playerTurn","playerWins","restartGame","computerBoard","GameLogicContainer","useState","setPlayer","computer","setComputer","setPlayerBoard","setComputerBoard","setPlayerTurn","hitPlayerBlocks","setHitPlayerBlocks","setGameOver","setPreparing","placingShip","setPlacingShip","chosenShip","setChosenShip","setShipNumber","setPlacementError","setPlaceAllShipsError","setPlayerWins","arrayItem","includes","useEffect","setTimeout","getPosition","prevState","parseInt","computerAttack","computerShips","e","target","getAttribute","targetBlockX","targetBlockY","stopPropagation","targetShipNumber","parentNode","targetShip","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e7a7131.chunk.js","sourcesContent":["const shipFactory = (x, y, shipLength, orientation, shipNumber) => {\n  let positions = [];\n  if (orientation === 'horizontal') {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x + i, y: y, hit: false };\n      positions.push(newPosition);\n    }\n  } else {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x, y: y - i, hit: false };\n      positions.push(newPosition);\n    }\n  }\n\n  const getShipLength = () => shipLength;\n  const getOrientation = () => orientation;\n  const getShipNumber = () => shipNumber;\n  let placed = false;\n\n  function hit(a, b) {\n    positions.forEach((shipBlock) => {\n      if (shipBlock.x === a && shipBlock.y === b) {\n        positions.splice(positions.indexOf(shipBlock), 1, {\n          x: shipBlock.x,\n          y: shipBlock.y,\n          hit: true,\n        });\n      }\n    });\n  }\n\n  function isSunk() {\n    return positions.every((block) => block.hit);\n  }\n\n  if (\n    (x !== null && x + shipLength > 10 && orientation === 'horizontal') ||\n    (y - shipLength < -1 && orientation === 'vertical')\n  ) {\n    return null;\n  }\n\n  return {\n    getShipLength,\n    getOrientation,\n    positions,\n    hit,\n    isSunk,\n    placed,\n    getShipNumber,\n  };\n};\n\nexport default shipFactory;\n","import shipFactory from './shipFactory';\n\nconst playerFactory = (name) => {\n  const getName = () => name;\n  let playerShips = [];\n\n  //Create the initial ships that the player can place\n  if (name === 'Player') {\n    let newShip = shipFactory(undefined, undefined, 5, 'horizontal');\n    let newShip2 = shipFactory(undefined, undefined, 4, 'horizontal');\n    let newShip3 = shipFactory(undefined, undefined, 3, 'horizontal');\n    let newShip4 = shipFactory(undefined, undefined, 3, 'horizontal');\n    let newShip5 = shipFactory(undefined, undefined, 2, 'horizontal');\n    playerShips.push(newShip, newShip2, newShip3, newShip4, newShip5);\n  }\n\n  //It's possible to consolidate the following two rotation functions into one, but requires React to not run in Strict Mode.\n  function rotateHorizontalShip(shipIndex) {\n    const newVerticalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'vertical'\n    );\n    return playerShips.splice(shipIndex, 1, newVerticalShip);\n  }\n\n  function rotateVerticalShip(shipIndex) {\n    const newHorizontalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'horizontal'\n    );\n    return playerShips.splice(shipIndex, 1, newHorizontalShip);\n  }\n\n  return {\n    getName,\n    playerShips,\n    rotateHorizontalShip,\n    rotateVerticalShip,\n  };\n};\n\nexport default playerFactory;\n","function createGameBoardArray() {\n  let gameBoardArray = [];\n  let loopCounter = 0;\n  for (let i = 0; i < 100; i++) {\n    let x = i;\n    let y = 9;\n\n    function setX() {\n      if (i > 9) {\n        return (x = i % 10);\n      } else {\n        return x;\n      }\n    }\n\n    function setY() {\n      if (i % 10 === 0 && i > 9) {\n        loopCounter += 1;\n      }\n      return y - loopCounter;\n    }\n\n    let emptyBlock = { empty: true, x: setX(), y: setY() };\n\n    gameBoardArray.push(emptyBlock);\n  }\n  return gameBoardArray;\n}\n\nexport default createGameBoardArray;\n","function xGenerator() {\n  let x = Math.floor(Math.random() * 10);\n  return x;\n}\n\nfunction yGenerator() {\n  let y = Math.floor(Math.random() * 10);\n  return y;\n}\n\nfunction orientationGenerator() {\n  let orientationNumber = Math.floor(Math.random() * 10);\n  if (orientationNumber % 2 === 0) {\n    return 'horizontal';\n  } else {\n    return 'vertical';\n  }\n}\n\n//Generate positions for a new ship\nfunction generateShipPlacement(shipLength) {\n  const newShip = {\n    x: xGenerator(),\n    y: yGenerator(),\n    length: shipLength,\n    orientation: orientationGenerator(),\n  };\n  //Prevent impossible ships (going off grid)\n  while (\n    (newShip.x !== null &&\n      newShip.x + shipLength > 10 &&\n      newShip.orientation === 'horizontal') ||\n    (newShip.y - shipLength < -1 && newShip.orientation === 'vertical') ||\n    newShip === undefined\n  ) {\n    newShip.x = xGenerator();\n    newShip.y = yGenerator();\n    newShip.orientation = orientationGenerator();\n  }\n  return newShip;\n}\n\nfunction placeShipsHelper(board) {\n  const newShip = generateShipPlacement(2);\n  const newShip2 = generateShipPlacement(3);\n  const newShip3 = generateShipPlacement(3);\n  const newShip4 = generateShipPlacement(4);\n  const newShip5 = generateShipPlacement(5);\n\n  function placeShipArguments(ship) {\n    return [ship.x, ship.y, ship.length, ship.orientation];\n  }\n\n  const placeShip1 = board.placeShip(...placeShipArguments(newShip));\n\n  const placeShip2 = board.placeShip(...placeShipArguments(newShip2));\n\n  const placeShip3 = board.placeShip(...placeShipArguments(newShip3));\n\n  const placeShip4 = board.placeShip(...placeShipArguments(newShip4));\n\n  const placeShip5 = board.placeShip(...placeShipArguments(newShip5));\n\n  const placedShips = [\n    placeShip1,\n    placeShip2,\n    placeShip3,\n    placeShip4,\n    placeShip5,\n  ];\n\n  //If a ship overlaps another ship, create a new one\n  placedShips.forEach((ship) => {\n    while (ship !== true) {\n      let replacementShip = generateShipPlacement(ship.getShipLength());\n      ship = board.placeShip(\n        replacementShip.x,\n        replacementShip.y,\n        replacementShip.length,\n        replacementShip.orientation\n      );\n    }\n  });\n}\n\nexport default placeShipsHelper;\n","import shipFactory from './shipFactory';\nimport createGameBoardArray from '../helper_functions/createGameBoardArray';\nimport placeShipsHelper from '../helper_functions/placeShipsHelper';\n\nconst gameboardFactory = () => {\n  let gameBoardArray = createGameBoardArray();\n  const playerShipPositions = [];\n\n  function placeShip(x, y, shipLength, orientation, shipNumber) {\n    //Create a new ship\n    const newShip = shipFactory(x, y, shipLength, orientation, shipNumber);\n\n    //If that ship was successfully created...\n    if (newShip !== null) {\n      const shipPositions = [...newShip.positions];\n      let shipOverlap = false;\n\n      //Check if it overlaps with any other ships\n      playerShipPositions.forEach((currentPosition) => {\n        if (\n          shipPositions.some(\n            (position) =>\n              position.x === currentPosition.x &&\n              position.y === currentPosition.y\n          )\n        ) {\n          return (shipOverlap = true);\n        }\n      });\n\n      //If it doesn't overlap, push it to the gameBoardArray and return true\n      if (!shipOverlap) {\n        shipPositions.forEach((shipPosition) => {\n          gameBoardArray.forEach((block) => {\n            const shipBlock = {\n              empty: false,\n              ship: newShip,\n            };\n            if (shipPosition.x === block.x && shipPosition.y === block.y) {\n              shipBlock.x = block.x;\n              shipBlock.y = block.y;\n              gameBoardArray.splice(\n                gameBoardArray.indexOf(block),\n                1,\n                shipBlock\n              );\n              playerShipPositions.push(shipPosition);\n            }\n          });\n        });\n        return true;\n      } else {\n        return newShip;\n      }\n    }\n  }\n\n  function removeShip(shipIndex, blockId) {\n    //If you clicked a ship...\n    if (gameBoardArray[blockId].ship) {\n      //Create an array of that ship's positions\n      const shipPositions = gameBoardArray[blockId].ship.positions;\n\n      //Check the gameBoardArray and the shipPositions array\n      gameBoardArray.forEach((block) => {\n        shipPositions.forEach((position) => {\n          let emptyBlock = { empty: true, x: position.x, y: position.y };\n          //If an index of the gameBoardArray matches the position of the clicked ship, splice it with an empty block\n          if (\n            block.ship &&\n            block.ship.getShipNumber() === shipIndex &&\n            block.x === emptyBlock.x &&\n            block.y === emptyBlock.y\n          ) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, emptyBlock);\n          }\n          //Then remove them from playerShipPositions and move onto the next\n          playerShipPositions.forEach((playerShipPosition) => {\n            if (playerShipPosition === position) {\n              playerShipPositions.splice(\n                playerShipPositions.indexOf(playerShipPosition, 1)\n              );\n            }\n          });\n        });\n      });\n    }\n  }\n\n  function receiveAttack(blockNumber, a, b) {\n    let targetArrayBlock = gameBoardArray[blockNumber];\n    let missBlock = { empty: false, miss: true, hit: false };\n    let hitBlock = {\n      empty: false,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n    let sunkBlock = {\n      empty: false,\n      sunk: true,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n\n    //If you click a ship...\n    if (targetArrayBlock.ship) {\n      //Hit it!\n      targetArrayBlock.ship.hit(a, b);\n      //And if that ship is sunk by you hittting it...\n      if (targetArrayBlock.ship.isSunk()) {\n        //Replace all relevant blocks with 'sunk ship' blocks\n        gameBoardArray.forEach((block) => {\n          if (block.ship === targetArrayBlock.ship) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, sunkBlock);\n          }\n        });\n\n        //Else just replace the block you hit with a 'hit' block\n      } else {\n        gameBoardArray.splice(blockNumber, 1, hitBlock);\n      }\n    }\n\n    //Else if you missed, replace the clicked block with a 'miss' block\n    else {\n      return gameBoardArray.splice(blockNumber, 1, missBlock);\n    }\n  }\n\n  function placeShips() {\n    placeShipsHelper(this);\n  }\n\n  return {\n    gameBoardArray,\n    playerShipPositions,\n    placeShip,\n    removeShip,\n    receiveAttack,\n    placeShips,\n  };\n};\n\nexport default gameboardFactory;\n","const DisplayPlayerBoard = (props) => {\n  return (\n    <div\n      id={\n        props.preparing\n          ? 'board-wrapper__player-board-wrapper--preparing'\n          : 'board-wrapper__player-board-wrapper'\n      }\n    >\n      {props.playerBoard.gameBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='player-ship-block--sunk'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            ></div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='player-ship-block--hit'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              !\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='player-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              data-shipnumber={block.ship.getShipNumber()}\n              onClick={props.removeShipFromBoard}\n            ></div>\n          );\n        } else if (block.miss) {\n          return <div key={index} className='miss-block'></div>;\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.placeChosenShip}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerBoard;\n","const DisplayComputerBoard = (props) => {\n  return (\n    <div id='board-wrapper__computer-board-wrapper'>\n      {props.computerBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block--sunk'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            ></div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block--hit'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              !\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              onClick={props.playerAttackHandler}\n            >\n              s\n            </div>\n          );\n        } else if (block.miss) {\n          return <div key={index} className='miss-block'></div>;\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.playerAttackHandler}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayComputerBoard;\n","const DisplayPlayerShipDock = (props) => {\n  return (\n    <div id='player-ships-wrapper'>\n      <div id='player-ships-wrapper__instructions-wrapper'>\n        <h2>Place your ships</h2>\n      </div>\n      <div id='player-ships-wrapper__ships'>\n        {props.player.playerShips.map((ship, index) => {\n          return (\n            <>\n              {ship.placed === false && (\n                <div\n                  key={index}\n                  className={\n                    'player-ships-wrapper__ship--' + ship.getOrientation()\n                  }\n                  data-shipnumber={index}\n                  data-length={ship.getShipLength()}\n                  data-orientation={ship.getOrientation()}\n                  onClick={props.chooseShip}\n                >\n                  <button\n                    onClick={props.rotateShip}\n                    className='ship__rotate-ship-button'\n                  >\n                    Rotate\n                  </button>\n                  <>\n                    {ship.positions.map((position, index) => {\n                      return (\n                        <div\n                          key={index}\n                          className='player-ship-block--docked'\n                          id={index}\n                          data-x={props.setX(index)}\n                          data-y={props.setY(index)}\n                        ></div>\n                      );\n                    })}\n                  </>\n                </div>\n              )}\n            </>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayPlayerShipDock;\n","import DisplayPlayerShipDock from './display_components/DisplayPlayerShipDock';\n\nconst PlayerShipDockContainer = (props) => {\n  return (\n    <DisplayPlayerShipDock\n      player={props.player}\n      setX={props.setX}\n      setY={props.setY}\n      chooseShip={props.chooseShip}\n      rotateShip={props.rotateShip}\n      mouseMove={props.mouseMove}\n    />\n  );\n};\n\nexport default PlayerShipDockContainer;\n","const DisplayPlacementError = (props) => {\n  return (\n    <div className='error-wrapper'>\n      Unable to place ship. Check for collision and available space.\n    </div>\n  );\n};\n\nexport default DisplayPlacementError;\n","const DisplayPlaceAllShipsError = (props) => {\n  return (\n    <div className='error-wrapper'>\n      Place all ships before starting the game.\n    </div>\n  );\n};\n\nexport default DisplayPlaceAllShipsError;\n","import DisplayPlayerBoard from './DisplayPlayerBoard';\nimport DisplayComputerBoard from './DisplayComputerBoard';\nimport PlayerShipDockContainer from '../PlayerShipDockContainer';\nimport DisplayPlacementError from './DisplayPlacementError';\nimport DisplayPlaceAllShipsError from './DisplayPlaceAllShipsError';\n\nconst DisplayGame = (props) => {\n  //Used to set data values of the blocks\n  function setX(index) {\n    let x = index;\n    if (index > 9) {\n      return (x = index % 10);\n    } else {\n      return x;\n    }\n  }\n\n  //Same as above\n  //Thanks to 'cyborg/human#5133' on TOP Discord for the much cleaner version of this function!\n  function setY(index) {\n    let y = 9;\n    if (index > 89) {\n      return (y = 0);\n    } else {\n      const val = Math.floor(index / 10);\n      return (y = 9 - val);\n    }\n  }\n\n  return (\n    <div id='game-wrapper'>\n      <div id='header-wrapper'>\n        <h1>Battleship</h1>\n      </div>\n      <div id='board-wrapper'>\n        <DisplayPlayerBoard\n          player={props.player}\n          playerBoard={props.playerBoard}\n          setX={setX}\n          setY={setY}\n          placeChosenShip={props.placeChosenShip}\n          removeShipFromBoard={props.removeShipFromBoard}\n          preparing={props.preparing}\n        />\n        {props.preparing && (\n          <>\n            {props.placementError && <DisplayPlacementError />}\n            {props.placeAllShipsError && <DisplayPlaceAllShipsError />}\n            <PlayerShipDockContainer\n              player={props.player}\n              setX={setX}\n              setY={setY}\n              chooseShip={props.chooseShip}\n              rotateShip={props.rotateShip}\n            />\n            <button onClick={props.placeRandomShips}>test</button>\n            <button id='start-game-button' onClick={props.startGame}>\n              Start game\n            </button>\n          </>\n        )}\n        {!props.preparing && (\n          <>\n            {!props.gameOver && (\n              <>\n                {props.playerTurn ? (\n                  <h2 id='turn-display'>Player turn</h2>\n                ) : (\n                  <h2 id='turn-display'>Computer turn</h2>\n                )}\n              </>\n            )}\n            {props.gameOver && (\n              <>\n                {props.playerWins ? (\n                  <div id='game-over-info'>\n                    You win!{' '}\n                    <button onClick={props.restartGame}>Restart</button>\n                  </div>\n                ) : (\n                  <div id='game-over-info'>\n                    You lose!{' '}\n                    <button onClick={props.restartGame}>Restart</button>\n                  </div>\n                )}\n              </>\n            )}\n            <DisplayComputerBoard\n              computerBoardArray={props.computerBoard.gameBoardArray}\n              setX={setX}\n              setY={setY}\n              playerAttackHandler={props.playerAttackHandler}\n              placeChosenShip={props.placeChosenShip}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayGame;\n","import playerFactory from '../factories/playerFactory';\nimport gameboardFactory from '../factories/gameboardFactory';\nimport DisplayGame from './display_components/DisplayGame';\nimport { useEffect, useState } from 'react';\n\nconst GameLogicContainer = (props) => {\n  const [player, setPlayer] = useState(playerFactory('Player'));\n  const [computer, setComputer] = useState(playerFactory('Computer'));\n  const [playerBoard, setPlayerBoard] = useState(gameboardFactory());\n  const [computerBoard, setComputerBoard] = useState(gameboardFactory());\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [hitPlayerBlocks, setHitPlayerBlocks] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [preparing, setPreparing] = useState(true);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [chosenShip, setChosenShip] = useState();\n  const [shipNumber, setShipNumber] = useState(0);\n  const [placementError, setPlacementError] = useState(false);\n  const [placeAllShipsError, setPlaceAllShipsError] = useState(false);\n  const [playerWins, setPlayerWins] = useState();\n\n  function playerAttackHandler(e) {\n    if (playerTurn && !preparing && !gameOver) {\n      setComputerBoard((prevState) => {\n        prevState.receiveAttack(\n          e.target.id,\n          parseInt(e.target.getAttribute('data-x')),\n          parseInt(e.target.getAttribute('data-y'))\n        );\n        setPlayerTurn(false);\n        return { ...prevState };\n      });\n    }\n  }\n\n  function chooseShip(e) {\n    if (!placingShip) {\n      const chosenShip = {\n        shipLength: parseInt(e.target.getAttribute('data-length')),\n        orientation: e.target.getAttribute('data-orientation'),\n      };\n      setPlacingShip(true);\n      setShipNumber(parseInt(e.target.getAttribute('data-shipnumber')));\n      setChosenShip(chosenShip);\n      e.target.className += '--selected';\n    }\n  }\n\n  function placeChosenShip(e) {\n    if (placingShip) {\n      setPlayerBoard((prevState) => {\n        const targetBlockX = parseInt(e.target.getAttribute('data-x'));\n        const targetBlockY = parseInt(e.target.getAttribute('data-y'));\n        let placedShip = prevState.placeShip(\n          targetBlockX,\n          targetBlockY,\n          chosenShip.shipLength,\n          chosenShip.orientation,\n          shipNumber\n        );\n        if (placedShip === true) {\n          player.playerShips[shipNumber].placed = true;\n          setPlacementError(false);\n          setPlacingShip(false);\n        } else {\n          setPlacementError(true);\n        }\n        return { ...prevState };\n      });\n    }\n  }\n\n  function removeShipFromBoard(e) {\n    if (preparing && !placingShip) {\n      setPlayerBoard((prevState) => {\n        const targetShip = parseInt(e.target.getAttribute('data-shipnumber'));\n        const blockId = parseInt(e.target.id);\n        player.playerShips[targetShip].placed = false;\n        playerBoard.removeShip(targetShip, blockId);\n        return { ...prevState };\n      });\n    }\n  }\n\n  function rotateShip(e) {\n    e.stopPropagation();\n    if (!placingShip) {\n      const targetShipNumber = e.target.parentNode.getAttribute(\n        'data-shipnumber'\n      );\n      const orientation = e.target.parentNode.getAttribute('data-orientation');\n\n      orientation === 'horizontal'\n        ? setPlayer((prevState) => {\n            prevState.rotateHorizontalShip(targetShipNumber);\n            return { ...prevState };\n          })\n        : setPlayer((prevState) => {\n            prevState.rotateVerticalShip(targetShipNumber);\n            return { ...prevState };\n          });\n    }\n  }\n\n  function startGame() {\n    const playerShips = [];\n\n    playerBoard.gameBoardArray.forEach((arrayItem) => {\n      if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n        playerShips.push(arrayItem.ship);\n      }\n    });\n    if (preparing && playerShips.length === 5) {\n      computerBoard.placeShips();\n      setPreparing(false);\n      setPlaceAllShipsError(false);\n    } else {\n      setPlaceAllShipsError(true);\n    }\n  }\n\n  function restartGame() {\n    setPreparing(true);\n    setPlayerTurn(true);\n    setHitPlayerBlocks([]);\n    setGameOver(false);\n    setPlayerWins('');\n    setPlayer(playerFactory('Player'));\n    setComputer(playerFactory('Computer'));\n    setPlayerBoard(gameboardFactory());\n    setComputerBoard(gameboardFactory());\n  }\n\n  function placeRandomShips() {\n    playerBoard.placeShips();\n    startGame();\n  }\n\n  //The computer takes a turn whenever playerTurn changes (ie. whenever attacked)\n  useEffect(() => {\n    function computerAttack() {\n      let position = 0;\n\n      //Create a random position to attack\n      function getPosition() {\n        return (position = Math.floor(Math.random() * 100));\n      }\n      setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n\n      //Prevents repeat hits\n      while (\n        hitPlayerBlocks.includes(position) &&\n        hitPlayerBlocks.length < 100\n      ) {\n        setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n      }\n\n      setPlayerBoard((prevState) => {\n        prevState.receiveAttack(\n          position,\n          parseInt(prevState.gameBoardArray[position].x),\n          parseInt(prevState.gameBoardArray[position].y)\n        );\n        return { ...prevState };\n      });\n\n      setPlayerTurn(true);\n    }\n\n    if (!playerTurn && !gameOver) {\n      //Timeout used to give the computer some fake thinking time\n      setTimeout(function () {\n        computerAttack();\n      }, 500);\n    }\n    // eslint-disable-next-line\n  }, [playerTurn]);\n\n  //Checks for game over\n  useEffect(() => {\n    if (!preparing) {\n      const computerShips = [];\n      const playerShips = [];\n\n      computerBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !computerShips.includes(arrayItem.ship)) {\n          computerShips.push(arrayItem.ship);\n        }\n      });\n\n      playerBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n          playerShips.push(arrayItem.ship);\n        }\n      });\n\n      if (computerShips.every((ship) => ship.isSunk())) {\n        setPlayerWins(true);\n        setGameOver(true);\n      }\n\n      if (playerShips.every((ship) => ship.isSunk())) {\n        setPlayerWins(false);\n        setGameOver(true);\n      }\n    }\n  }, [playerBoard, computerBoard, preparing]);\n\n  return (\n    <DisplayGame\n      player={player}\n      playerBoard={playerBoard}\n      computer={computer}\n      computerBoard={computerBoard}\n      playerAttackHandler={playerAttackHandler}\n      chooseShip={chooseShip}\n      placeChosenShip={placeChosenShip}\n      rotateShip={rotateShip}\n      preparing={preparing}\n      startGame={startGame}\n      placeRandomShips={placeRandomShips}\n      playerTurn={playerTurn}\n      restartGame={restartGame}\n      removeShipFromBoard={removeShipFromBoard}\n      placementError={placementError}\n      placeAllShipsError={placeAllShipsError}\n      playerWins={playerWins}\n      gameOver={gameOver}\n    />\n  );\n};\n\nexport default GameLogicContainer;\n","import GameLogicContainer from './components/GameLogicContainer';\nimport './styles/reset.css';\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <GameLogicContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}