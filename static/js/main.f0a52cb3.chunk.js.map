{"version":3,"sources":["components/shipFactory.js","components/gameboardFactory.js","components/playerFactory.js","components/DisplayPlayerBoard.jsx","components/DisplayComputerBoard.jsx","components/DisplayPlayerShipDock.jsx","components/PlayerShipDockContainer.jsx","components/DisplayPlacementError.jsx","components/DisplayGame.jsx","components/GameLoopContainer.js","App.js","index.js"],"names":["shipFactory","x","y","shipLength","orientation","shipNumber","positions","i","newPosition","hit","push","getShipLength","getOrientation","a","b","forEach","shipBlock","splice","indexOf","isSunk","every","hitBlock","placed","getShipNumber","gameboardFactory","gameBoardArray","playerShipPositions","loopCounter","emptyBlock","empty","placeShip","newShip","ship","shipPositions","shipOverlap","currentPosition","some","position","shipPosition","block","removeShip","shipIndex","blockId","console","log","playerShipPosition","receiveAttack","blockNumber","targetArrayBlock","sunkBlock","sunk","miss","listShips","playerFactory","name","playerBoard","undefined","newShip2","newShip3","newShip4","newShip5","playerShips","getName","makePlay","toAttack","length","randomPosition","Math","floor","random","filteredShips","filter","rotateHorizontalShip","newVerticalShip","rotateVerticalShip","newHorizontalShip","DisplayPlayerBoard","props","id","player","map","index","className","data-x","setX","data-y","setY","data-shipnumber","onClick","removeShipFromBoard","placeChosenShip","DisplayComputerBoard","computerBoardArray","playerAttackHandler","DisplayPlayerShipDock","data-length","data-orientation","chooseShip","rotateShip","PlayerShipDockContainer","mouseMove","DisplayPlacementError","DisplayGame","computer","preparing","placementError","startGame","placeTestShip","computerAttack","GameLoopContainer","useState","setPlayer","setComputer","playerTurn","setPlayerTurn","hitPlayerBlocks","setHitPlayerBlocks","setGameOver","setPreparing","placingShip","setPlacingShip","chosenShip","setChosenShip","setShipNumber","setPlacementError","getPosition","includes","prevState","useEffect","setTimeout","computerShips","arrayItem","e","target","parseInt","getAttribute","targetBlockX","targetBlockY","placedShip","stopPropagation","targetShipNumber","parentNode","targetShip","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0a52cb3.chunk.js","sourcesContent":["const shipFactory = (x, y, shipLength, orientation, shipNumber) => {\n  let positions = [];\n  if (orientation === 'horizontal') {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x + i, y: y, hit: false };\n      positions.push(newPosition);\n    }\n  } else {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x, y: y - i, hit: false };\n      positions.push(newPosition);\n    }\n  }\n\n  const getShipLength = () => shipLength;\n  const getOrientation = () => orientation;\n  const getShipNumber = () => shipNumber;\n  let placed = false;\n\n  function hit(a, b) {\n    positions.forEach((shipBlock) => {\n      if (shipBlock.x === a && shipBlock.y === b) {\n        positions.splice(positions.indexOf(shipBlock), 1, {\n          x: shipBlock.x,\n          y: shipBlock.y,\n          hit: true,\n        });\n      }\n    });\n  }\n\n  function isSunk() {\n    return positions.every((hitBlock) => hitBlock.hit);\n  }\n\n  if (\n    (x !== null && x + shipLength > 10 && orientation === 'horizontal') ||\n    (y - shipLength < -1 && orientation === 'vertical')\n  ) {\n    return null;\n  }\n\n  return {\n    getShipLength,\n    getOrientation,\n    positions,\n    hit,\n    isSunk,\n    placed,\n    getShipNumber,\n  };\n};\n\nexport default shipFactory;\n","import shipFactory from './shipFactory';\n\nconst gameboardFactory = () => {\n  let gameBoardArray = [];\n  const playerShipPositions = [];\n\n  let loopCounter = 0;\n\n  const pushToBoard = (() => {\n    for (let i = 0; i < 100; i++) {\n      let x = i;\n      let y = 9;\n\n      function setX() {\n        if (i > 9) {\n          return (x = i % 10);\n        } else {\n          return x;\n        }\n      }\n\n      function setY() {\n        if (i % 10 === 0 && i > 9) {\n          loopCounter += 1;\n        }\n        return y - loopCounter;\n      }\n\n      let emptyBlock = { empty: true, x: setX(), y: setY() };\n\n      gameBoardArray.push(emptyBlock);\n    }\n  })();\n\n  function placeShip(x, y, shipLength, orientation, shipNumber) {\n    const newShip = shipFactory(x, y, shipLength, orientation, shipNumber);\n\n    if (newShip !== null) {\n      const shipBlock = {\n        empty: false,\n        ship: newShip,\n      };\n\n      const shipPositions = [...shipBlock.ship.positions];\n      let shipOverlap = false;\n\n      playerShipPositions.forEach((currentPosition) => {\n        if (\n          shipPositions.some(\n            (position) =>\n              position.x === currentPosition.x &&\n              position.y === currentPosition.y\n          )\n        ) {\n          return (shipOverlap = true);\n        }\n      });\n\n      if (shipBlock.ship !== null && !shipOverlap) {\n        shipPositions.forEach((shipPosition) => {\n          gameBoardArray.forEach((block) => {\n            if (shipPosition.x === block.x && shipPosition.y === block.y) {\n              gameBoardArray.splice(\n                gameBoardArray.indexOf(block),\n                1,\n                shipBlock\n              );\n              playerShipPositions.push(shipPosition);\n            }\n          });\n        });\n        return true;\n      }\n    }\n  }\n\n  function removeShip(shipIndex, blockId) {\n    if (gameBoardArray[blockId].ship) {\n      console.log(gameBoardArray[blockId].ship.positions);\n      const shipPositions = gameBoardArray[blockId].ship.positions;\n      gameBoardArray.forEach((block) => {\n        shipPositions.forEach((position) => {\n          let emptyBlock = { empty: true, x: position.x, y: position.y };\n          if (block.ship && block.ship.getShipNumber() === shipIndex) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, emptyBlock);\n          }\n          playerShipPositions.forEach((playerShipPosition) => {\n            if (playerShipPosition === position) {\n              playerShipPositions.splice(\n                playerShipPositions.indexOf(playerShipPositions, 1)\n              );\n            }\n          });\n        });\n      });\n    }\n  }\n\n  function receiveAttack(blockNumber, a, b) {\n    let targetArrayBlock = gameBoardArray[blockNumber];\n    let missBlock = { empty: false, miss: true, hit: false };\n    let hitBlock = {\n      empty: false,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n    let sunkBlock = {\n      empty: false,\n      sunk: true,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n\n    //If you click a ship...\n    if (targetArrayBlock.ship) {\n      //Hit it!\n      targetArrayBlock.ship.hit(a, b);\n\n      //And if that ship is sunk by you hittting it...\n      if (targetArrayBlock.ship.isSunk()) {\n        //Replace all relevant blocks with 'sunk ship' blocks\n        gameBoardArray.forEach((block) => {\n          if (block.ship === targetArrayBlock.ship) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, sunkBlock);\n          }\n        });\n\n        //Else just replace the block you hit with a 'hit' block\n      } else {\n        gameBoardArray.splice(blockNumber, 1, hitBlock);\n      }\n    }\n\n    //Else if you missed, replace the clicked block with a 'miss' block\n    else {\n      return gameBoardArray.splice(blockNumber, 1, missBlock);\n    }\n  }\n\n  function listShips() {\n    gameBoardArray.forEach((block) => {\n      if (block.ship) {\n        return block;\n      }\n    });\n  }\n\n  return {\n    gameBoardArray,\n    playerShipPositions,\n    placeShip,\n    removeShip,\n    receiveAttack,\n    listShips,\n  };\n};\n\nexport default gameboardFactory;\n","import gameboardFactory from './gameboardFactory';\nimport shipFactory from './shipFactory';\n\nconst playerFactory = (name) => {\n  const getName = () => name;\n  const playerBoard = gameboardFactory();\n\n  let newShip = shipFactory(undefined, undefined, 5, 'horizontal');\n  let newShip2 = shipFactory(undefined, undefined, 4, 'horizontal');\n  let newShip3 = shipFactory(undefined, undefined, 3, 'horizontal');\n  let newShip4 = shipFactory(undefined, undefined, 3, 'horizontal');\n  let newShip5 = shipFactory(undefined, undefined, 2, 'horizontal');\n  let playerShips = [];\n  playerShips.push(newShip, newShip2, newShip3, newShip4, newShip5);\n\n  //It's possible to consolidate the following two rotation functions into one, but requires React to not run in Strict Mode.\n  function rotateHorizontalShip(shipIndex) {\n    const newVerticalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'vertical'\n    );\n    return playerShips.splice(shipIndex, 1, newVerticalShip);\n  }\n\n  function rotateVerticalShip(shipIndex) {\n    const newHorizontalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'horizontal'\n    );\n    return playerShips.splice(shipIndex, 1, newHorizontalShip);\n  }\n\n  function removeShip(shipIndex) {\n    console.log(playerShips[shipIndex]);\n    const filteredShips = playerShips.filter(\n      (ship) => ship !== playerShips[shipIndex]\n    );\n    return (playerShips = [...filteredShips]);\n  }\n  //check CV builder\n\n  function makePlay(toAttack, x, y, length) {\n    let randomPosition = Math.floor(Math.random() * 100);\n    if (x !== undefined) {\n      toAttack.placeShip(x, y, length);\n    } else {\n      toAttack.receiveAttack(randomPosition);\n    }\n  }\n\n  return {\n    getName,\n    playerBoard,\n    makePlay,\n    removeShip,\n    playerShips,\n    rotateHorizontalShip,\n    rotateVerticalShip,\n  };\n};\n\nexport default playerFactory;\n","const DisplayPlayerBoard = (props) => {\n  return (\n    <div id='board-wrapper__player-board-wrapper'>\n      {props.player.playerBoard.gameBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='friendly-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Sunk Ship\n            </div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='friendly-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Hit\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='friendly-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              data-shipnumber={block.ship.getShipNumber()}\n              onClick={props.removeShipFromBoard}\n            >\n              Ship\n            </div>\n          );\n        } else if (block.miss) {\n          return (\n            <div key={index} className='miss-block'>\n              Miss\n            </div>\n          );\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.placeChosenShip}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerBoard;\n","const DisplayComputerBoard = (props) => {\n  return (\n    <div id='board-wrapper__computer-board-wrapper'>\n      {props.computerBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Sunk Ship\n            </div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Hit\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              onClick={props.playerAttackHandler}\n            >\n              Ship\n            </div>\n          );\n        } else if (block.miss) {\n          return (\n            <div key={index} className='miss-block'>\n              Miss\n            </div>\n          );\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.playerAttackHandler}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayComputerBoard;\n","const DisplayPlayerShipDock = (props) => {\n  return (\n    <div id='player-ships-wrapper'>\n      {props.player.playerShips.map((ship, index) => {\n        return (\n          <>\n            {ship.placed === false && (\n              <div\n                key={index}\n                className={\n                  'player-ships-wrapper__ship--' + ship.getOrientation()\n                }\n                data-shipnumber={index}\n                data-length={ship.getShipLength()}\n                data-orientation={ship.getOrientation()}\n                onClick={props.chooseShip}\n              >\n                <button onClick={props.rotateShip}>Rotate</button>\n                <>\n                  {ship.positions.map((position, index) => {\n                    return (\n                      <div\n                        key={index}\n                        className='player-ship-block'\n                        id={index}\n                        data-x={props.setX(index)}\n                        data-y={props.setY(index)}\n                      >\n                        position {index}\n                      </div>\n                    );\n                  })}\n                </>\n              </div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerShipDock;\n","import DisplayPlayerShipDock from './DisplayPlayerShipDock';\n\nconst PlayerShipDockContainer = (props) => {\n  return (\n    <DisplayPlayerShipDock\n      player={props.player}\n      setX={props.setX}\n      setY={props.setY}\n      chooseShip={props.chooseShip}\n      rotateShip={props.rotateShip}\n      mouseMove={props.mouseMove}\n    />\n  );\n};\n\nexport default PlayerShipDockContainer;\n","const DisplayPlacementError = (props) => {\n  return (\n    <div id='error-wrapper'>\n      Unable to place ship. Check for collision and space.\n    </div>\n  );\n};\n\nexport default DisplayPlacementError;\n","import DisplayPlayerBoard from './DisplayPlayerBoard';\nimport DisplayComputerBoard from './DisplayComputerBoard';\nimport PlayerShipDockContainer from './PlayerShipDockContainer';\nimport DisplayPlacementError from './DisplayPlacementError';\n\nconst DisplayGame = (props) => {\n  return (\n    <div id='game-wrapper'>\n      <div id='board-wrapper'>\n        <DisplayPlayerBoard\n          player={props.player}\n          setX={props.setX}\n          setY={props.setY}\n          placeChosenShip={props.placeChosenShip}\n          removeShipFromBoard={props.removeShipFromBoard}\n        />\n        <DisplayComputerBoard\n          computerBoardArray={props.computer.playerBoard.gameBoardArray}\n          setX={props.setX}\n          setY={props.setY}\n          playerAttackHandler={props.playerAttackHandler}\n          placeChosenShip={props.placeChosenShip}\n        />\n      </div>\n      {props.preparing && (\n        <>\n          {props.placementError && <DisplayPlacementError />}\n          <PlayerShipDockContainer\n            player={props.player}\n            setX={props.setX}\n            setY={props.setY}\n            chooseShip={props.chooseShip}\n            rotateShip={props.rotateShip}\n          />\n          <button onClick={props.startGame}>Start game</button>\n        </>\n      )}\n      <button onClick={props.placeTestShip}>Test</button>\n      <button onClick={props.computerAttack}>Attacked</button>\n    </div>\n  );\n};\n\nexport default DisplayGame;\n","import playerFactory from './playerFactory';\nimport DisplayGame from './DisplayGame';\nimport { useEffect, useState } from 'react';\n\nconst GameLoopContainer = (props) => {\n  const [player, setPlayer] = useState(playerFactory('Player'));\n  const [computer, setComputer] = useState(playerFactory('PC'));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [hitPlayerBlocks, setHitPlayerBlocks] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [preparing, setPreparing] = useState(true);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [chosenShip, setChosenShip] = useState();\n  const [shipNumber, setShipNumber] = useState(0);\n  const [placementError, setPlacementError] = useState(false);\n\n  function placeTestShip() {\n    setComputer((prevState) => {\n      prevState.playerBoard.placeShip(3, 5, 3, 'horizontal');\n      return { ...prevState };\n    });\n  }\n\n  function playerAttackHandler(e) {\n    setComputer((prevState) => {\n      if (playerTurn && !preparing) {\n        prevState.playerBoard.receiveAttack(\n          e.target.id,\n          parseInt(e.target.getAttribute('data-x')),\n          parseInt(e.target.getAttribute('data-y'))\n        );\n        setPlayerTurn(false);\n        return { ...prevState };\n      }\n    });\n  }\n\n  function computerAttack() {\n    let position = 0;\n    function getPosition() {\n      return (position = Math.floor(Math.random() * 100));\n    }\n    setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n\n    while (hitPlayerBlocks.includes(position) && hitPlayerBlocks.length < 100) {\n      setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n    }\n\n    setPlayer((prevState) => {\n      prevState.playerBoard.receiveAttack(position);\n      return { ...prevState };\n    });\n    setPlayerTurn(true);\n  }\n\n  //Used to set data values in the JSX of <DisplayGame>\n  function setX(index) {\n    let x = index;\n    if (index > 9) {\n      return (x = index % 10);\n    } else {\n      return x;\n    }\n  }\n\n  //Same as above\n  //Thanks to 'cyborg/human#5133' on TOP Discord for the way cleaner version of this function!\n  function setY(index) {\n    let y = 9;\n    if (index > 89) {\n      return (y = 0);\n    } else {\n      const val = Math.floor(index / 10);\n      return (y = 9 - val);\n    }\n  }\n\n  function chooseShip(e) {\n    const chosenShip = {\n      shipLength: parseInt(e.target.getAttribute('data-length')),\n      orientation: e.target.getAttribute('data-orientation'),\n    };\n    setPlacingShip(true);\n    setShipNumber(parseInt(e.target.getAttribute('data-shipnumber')));\n    setChosenShip(chosenShip);\n  }\n\n  function placeChosenShip(e) {\n    setPlayer((prevState) => {\n      if (placingShip) {\n        const targetBlockX = parseInt(e.target.getAttribute('data-x'));\n        const targetBlockY = parseInt(e.target.getAttribute('data-y'));\n        let placedShip = prevState.playerBoard.placeShip(\n          targetBlockX,\n          targetBlockY,\n          chosenShip.shipLength,\n          chosenShip.orientation,\n          shipNumber\n        );\n        setPlacingShip(false);\n        if (placedShip) {\n          player.playerShips[shipNumber].placed = true;\n          setPlacementError(false);\n        } else {\n          setPlacementError(true);\n        }\n        return { ...prevState };\n      }\n    });\n  }\n\n  function removeShipFromBoard(e) {\n    setPlayer((prevState) => {\n      if (preparing) {\n        const targetShip = parseInt(e.target.getAttribute('data-shipnumber'));\n        const blockId = parseInt(e.target.id);\n        console.log(blockId);\n        player.playerShips[targetShip].placed = false;\n        player.playerBoard.removeShip(targetShip, blockId);\n        return { ...prevState };\n      }\n    });\n  }\n\n  function rotateShip(e) {\n    e.stopPropagation();\n    if (!placingShip) {\n      const targetShipNumber = e.target.parentNode.getAttribute(\n        'data-shipnumber'\n      );\n      const orientation = e.target.parentNode.getAttribute('data-orientation');\n\n      orientation === 'horizontal'\n        ? setPlayer((prevState) => {\n            prevState.rotateHorizontalShip(targetShipNumber);\n            return { ...prevState };\n          })\n        : setPlayer((prevState) => {\n            prevState.rotateVerticalShip(targetShipNumber);\n            return { ...prevState };\n          });\n    }\n  }\n\n  useEffect(() => {\n    if (!player.playerShips.length) {\n      //Timeout used to give the computer some fake thinking time\n      setTimeout(function () {\n        computerAttack();\n      }, 0);\n    }\n    //eslint-disable-next-line\n  }, [playerTurn]);\n\n  //The computer takes a turn whenever playerTurn changes (ie. whenever attacked)\n  useEffect(() => {\n    if (!playerTurn) {\n      //Timeout used to give the computer some fake thinking time\n      setTimeout(function () {\n        computerAttack();\n      }, 0);\n    }\n    //eslint-disable-next-line\n  }, [playerTurn]);\n\n  //Checks for game over\n  useEffect(() => {\n    if (!preparing) {\n      const computerShips = [];\n      const playerShips = [];\n      computer.playerBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !computerShips.includes(arrayItem.ship)) {\n          computerShips.push(arrayItem.ship);\n        }\n      });\n\n      player.playerBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n          playerShips.push(arrayItem.ship);\n        }\n      });\n\n      if (computerShips.every((ship) => ship.isSunk())) {\n        console.log('all sunk! winner!');\n        setGameOver(true);\n      }\n\n      if (playerShips.every((ship) => ship.isSunk())) {\n        console.log('all sunk! loser!');\n        setGameOver(true);\n      }\n    }\n    // eslint-disable-next-line\n  }, [computer]);\n\n  function startGame() {\n    setPreparing(false);\n  }\n\n  return (\n    <DisplayGame\n      player={player}\n      computer={computer}\n      placeTestShip={placeTestShip}\n      playerAttackHandler={playerAttackHandler}\n      setX={setX}\n      setY={setY}\n      computerAttack={computerAttack}\n      chooseShip={chooseShip}\n      placeChosenShip={placeChosenShip}\n      rotateShip={rotateShip}\n      preparing={preparing}\n      startGame={startGame}\n      removeShipFromBoard={removeShipFromBoard}\n      placementError={placementError}\n    />\n  );\n};\n\nexport default GameLoopContainer;\n","import GameLoopContainer from './components/GameLoopContainer';\nimport './styles/reset.css';\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <GameLoopContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}