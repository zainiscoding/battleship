{"version":3,"sources":["components/shipFactory.js","components/gameboardFactory.js","components/playerFactory.js","components/DisplayPlayerBoard.jsx","components/DisplayComputerBoard.jsx","components/DisplayPlayerShipDock.jsx","components/PlayerShipDockContainer.jsx","components/DisplayPlacementError.jsx","components/DisplayPlaceAllShipsError.jsx","components/DisplayGame.jsx","components/GameLogicContainer.js","App.js","index.js"],"names":["shipFactory","x","y","shipLength","orientation","shipNumber","positions","i","newPosition","hit","push","getShipLength","getOrientation","a","b","forEach","shipBlock","splice","indexOf","isSunk","every","block","placed","getShipNumber","gameboardFactory","gameBoardArray","playerShipPositions","loopCounter","emptyBlock","empty","placeShip","newShip","shipPositions","shipOverlap","currentPosition","some","position","shipPosition","ship","removeShip","shipIndex","blockId","playerShipPosition","receiveAttack","blockNumber","targetArrayBlock","hitBlock","sunkBlock","sunk","miss","placeComputerShips","xGenerator","Math","floor","random","yGenerator","orientationGenerator","generateShipPlacement","length","undefined","newShip2","newShip3","newShip4","newShip5","placeShipArguments","this","replacementShip","listShips","playerFactory","name","gameBoard","playerShips","getName","makePlay","toAttack","randomPosition","filteredShips","filter","rotateHorizontalShip","newVerticalShip","rotateVerticalShip","newHorizontalShip","DisplayPlayerBoard","props","id","preparing","player","map","index","className","data-x","setX","data-y","setY","data-shipnumber","onClick","removeShipFromBoard","placeChosenShip","DisplayComputerBoard","computerBoardArray","playerAttackHandler","DisplayPlayerShipDock","data-length","data-orientation","chooseShip","rotateShip","PlayerShipDockContainer","mouseMove","DisplayPlacementError","DisplayPlaceAllShipsError","DisplayGame","placementError","placeAllShipsError","startGame","playerTurn","computer","gameOver","playerWins","restartGame","GameLogicContainer","useState","setPlayer","setComputer","setPlayerTurn","hitPlayerBlocks","setHitPlayerBlocks","setGameOver","setPreparing","placingShip","setPlacingShip","chosenShip","setChosenShip","setShipNumber","setPlacementError","setPlaceAllShipsError","setPlayerWins","useEffect","setTimeout","getPosition","includes","prevState","parseInt","computerAttack","computerShips","arrayItem","e","target","getAttribute","targetBlockX","targetBlockY","stopPropagation","targetShipNumber","parentNode","targetShip","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e3c1ba9.chunk.js","sourcesContent":["const shipFactory = (x, y, shipLength, orientation, shipNumber) => {\n  let positions = [];\n  if (orientation === 'horizontal') {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x + i, y: y, hit: false };\n      positions.push(newPosition);\n    }\n  } else {\n    for (let i = 0; i < shipLength; i++) {\n      const newPosition = { x: x, y: y - i, hit: false };\n      positions.push(newPosition);\n    }\n  }\n\n  const getShipLength = () => shipLength;\n  const getOrientation = () => orientation;\n  const getShipNumber = () => shipNumber;\n  let placed = false;\n\n  function hit(a, b) {\n    positions.forEach((shipBlock) => {\n      if (shipBlock.x === a && shipBlock.y === b) {\n        positions.splice(positions.indexOf(shipBlock), 1, {\n          x: shipBlock.x,\n          y: shipBlock.y,\n          hit: true,\n        });\n      }\n    });\n  }\n\n  function isSunk() {\n    return positions.every((block) => block.hit);\n  }\n\n  if (\n    (x !== null && x + shipLength > 10 && orientation === 'horizontal') ||\n    (y - shipLength < -1 && orientation === 'vertical')\n  ) {\n    return null;\n  }\n\n  return {\n    getShipLength,\n    getOrientation,\n    positions,\n    hit,\n    isSunk,\n    placed,\n    getShipNumber,\n  };\n};\n\nexport default shipFactory;\n","import shipFactory from './shipFactory';\n\nconst gameboardFactory = () => {\n  let gameBoardArray = [];\n  const playerShipPositions = [];\n\n  let loopCounter = 0;\n\n  for (let i = 0; i < 100; i++) {\n    let x = i;\n    let y = 9;\n\n    function setX() {\n      if (i > 9) {\n        return (x = i % 10);\n      } else {\n        return x;\n      }\n    }\n\n    function setY() {\n      if (i % 10 === 0 && i > 9) {\n        loopCounter += 1;\n      }\n      return y - loopCounter;\n    }\n\n    let emptyBlock = { empty: true, x: setX(), y: setY() };\n\n    gameBoardArray.push(emptyBlock);\n  }\n\n  function placeShip(x, y, shipLength, orientation, shipNumber) {\n    const newShip = shipFactory(x, y, shipLength, orientation, shipNumber);\n\n    if (newShip !== null) {\n      const shipPositions = [...newShip.positions];\n      let shipOverlap = false;\n\n      playerShipPositions.forEach((currentPosition) => {\n        if (\n          shipPositions.some(\n            (position) =>\n              position.x === currentPosition.x &&\n              position.y === currentPosition.y\n          )\n        ) {\n          return (shipOverlap = true);\n        }\n      });\n      if (!shipOverlap) {\n        shipPositions.forEach((shipPosition) => {\n          gameBoardArray.forEach((block) => {\n            const shipBlock = {\n              empty: false,\n              ship: newShip,\n            };\n            if (shipPosition.x === block.x && shipPosition.y === block.y) {\n              shipBlock.x = block.x;\n              shipBlock.y = block.y;\n              gameBoardArray.splice(\n                gameBoardArray.indexOf(block),\n                1,\n                shipBlock\n              );\n              playerShipPositions.push(shipPosition);\n            }\n          });\n        });\n        return true;\n      } else {\n        return newShip;\n      }\n    }\n  }\n\n  function removeShip(shipIndex, blockId) {\n    if (gameBoardArray[blockId].ship) {\n      const shipPositions = gameBoardArray[blockId].ship.positions;\n      gameBoardArray.forEach((block) => {\n        shipPositions.forEach((position) => {\n          let emptyBlock = { empty: true, x: position.x, y: position.y };\n          if (block.ship && block.ship.getShipNumber() === shipIndex) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, emptyBlock);\n          }\n          playerShipPositions.forEach((playerShipPosition) => {\n            if (playerShipPosition === position) {\n              playerShipPositions.splice(\n                playerShipPositions.indexOf(playerShipPositions, 1)\n              );\n            }\n          });\n        });\n      });\n    }\n  }\n\n  function receiveAttack(blockNumber, a, b) {\n    let targetArrayBlock = gameBoardArray[blockNumber];\n    let missBlock = { empty: false, miss: true, hit: false };\n    let hitBlock = {\n      empty: false,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n    let sunkBlock = {\n      empty: false,\n      sunk: true,\n      hit: true,\n      ship: gameBoardArray[blockNumber].ship,\n    };\n\n    //If you click a ship...\n    if (targetArrayBlock.ship) {\n      //Hit it!\n      targetArrayBlock.ship.hit(a, b);\n      //And if that ship is sunk by you hittting it...\n      if (targetArrayBlock.ship.isSunk()) {\n        //Replace all relevant blocks with 'sunk ship' blocks\n        gameBoardArray.forEach((block) => {\n          if (block.ship === targetArrayBlock.ship) {\n            gameBoardArray.splice(gameBoardArray.indexOf(block), 1, sunkBlock);\n          }\n        });\n\n        //Else just replace the block you hit with a 'hit' block\n      } else {\n        gameBoardArray.splice(blockNumber, 1, hitBlock);\n      }\n    }\n\n    //Else if you missed, replace the clicked block with a 'miss' block\n    else {\n      return gameBoardArray.splice(blockNumber, 1, missBlock);\n    }\n  }\n\n  function listShips() {\n    gameBoardArray.forEach((block) => {\n      if (block.ship) {\n        return block;\n      }\n    });\n  }\n\n  function placeComputerShips() {\n    function xGenerator() {\n      let x = Math.floor(Math.random() * 10);\n      return x;\n    }\n\n    function yGenerator() {\n      let y = Math.floor(Math.random() * 10);\n      return y;\n    }\n\n    function orientationGenerator() {\n      let orientationNumber = Math.floor(Math.random() * 10);\n      if (orientationNumber % 2 === 0) {\n        return 'horizontal';\n      } else {\n        return 'vertical';\n      }\n    }\n\n    //Generate positions for a new ship\n    function generateShipPlacement(shipLength) {\n      const newShip = {\n        x: xGenerator(),\n        y: yGenerator(),\n        length: shipLength,\n        orientation: orientationGenerator(),\n      };\n      //Prevent impossible ships (going off grid)\n      while (\n        (newShip.x !== null &&\n          newShip.x + shipLength > 10 &&\n          newShip.orientation === 'horizontal') ||\n        (newShip.y - shipLength < -1 && newShip.orientation === 'vertical') ||\n        newShip === undefined\n      ) {\n        newShip.x = xGenerator();\n        newShip.y = yGenerator();\n        newShip.orientation = orientationGenerator();\n      }\n      return newShip;\n    }\n\n    const newShip = generateShipPlacement(2);\n    const newShip2 = generateShipPlacement(3);\n    const newShip3 = generateShipPlacement(3);\n    const newShip4 = generateShipPlacement(4);\n    const newShip5 = generateShipPlacement(5);\n\n    function placeShipArguments(ship) {\n      return [ship.x, ship.y, ship.length, ship.orientation];\n    }\n\n    const placeShip1 = this.placeShip(...placeShipArguments(newShip));\n\n    const placeShip2 = this.placeShip(...placeShipArguments(newShip2));\n\n    const placeShip3 = this.placeShip(...placeShipArguments(newShip3));\n\n    const placeShip4 = this.placeShip(...placeShipArguments(newShip4));\n\n    const placeShip5 = this.placeShip(...placeShipArguments(newShip5));\n\n    const placedShips = [\n      placeShip1,\n      placeShip2,\n      placeShip3,\n      placeShip4,\n      placeShip5,\n    ];\n\n    //If a ship overlaps another ship, create a new one\n    placedShips.forEach((ship) => {\n      while (ship !== true) {\n        let replacementShip = generateShipPlacement(ship.getShipLength());\n        ship = this.placeShip(\n          replacementShip.x,\n          replacementShip.y,\n          replacementShip.length,\n          replacementShip.orientation\n        );\n      }\n    });\n  }\n\n  return {\n    gameBoardArray,\n    playerShipPositions,\n    placeShip,\n    removeShip,\n    receiveAttack,\n    placeComputerShips,\n    listShips,\n  };\n};\n\nexport default gameboardFactory;\n","import gameboardFactory from './gameboardFactory';\nimport shipFactory from './shipFactory';\n\nconst playerFactory = (name) => {\n  const getName = () => name;\n  const gameBoard = gameboardFactory();\n  let playerShips = [];\n\n  if (name === 'Player') {\n    let newShip = shipFactory(undefined, undefined, 5, 'horizontal');\n    let newShip2 = shipFactory(undefined, undefined, 4, 'horizontal');\n    let newShip3 = shipFactory(undefined, undefined, 3, 'horizontal');\n    let newShip4 = shipFactory(undefined, undefined, 3, 'horizontal');\n    let newShip5 = shipFactory(undefined, undefined, 2, 'horizontal');\n    playerShips.push(newShip, newShip2, newShip3, newShip4, newShip5);\n  }\n\n  //It's possible to consolidate the following two rotation functions into one, but requires React to not run in Strict Mode.\n  function rotateHorizontalShip(shipIndex) {\n    const newVerticalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'vertical'\n    );\n    return playerShips.splice(shipIndex, 1, newVerticalShip);\n  }\n\n  function rotateVerticalShip(shipIndex) {\n    const newHorizontalShip = shipFactory(\n      playerShips[shipIndex].x,\n      playerShips[shipIndex].y,\n      playerShips[shipIndex].getShipLength(),\n      'horizontal'\n    );\n    return playerShips.splice(shipIndex, 1, newHorizontalShip);\n  }\n\n  function removeShip(shipIndex) {\n    const filteredShips = playerShips.filter(\n      (ship) => ship !== playerShips[shipIndex]\n    );\n    return (playerShips = [...filteredShips]);\n  }\n\n  function makePlay(toAttack, x, y, length) {\n    let randomPosition = Math.floor(Math.random() * 100);\n    if (x !== undefined) {\n      toAttack.placeShip(x, y, length);\n    } else {\n      toAttack.receiveAttack(randomPosition);\n    }\n  }\n\n  return {\n    getName,\n    gameBoard,\n    makePlay,\n    removeShip,\n    playerShips,\n    rotateHorizontalShip,\n    rotateVerticalShip,\n  };\n};\n\nexport default playerFactory;\n","const DisplayPlayerBoard = (props) => {\n  return (\n    <div\n      id={\n        props.preparing\n          ? 'board-wrapper__player-board-wrapper--preparing'\n          : 'board-wrapper__player-board-wrapper'\n      }\n    >\n      {props.player.gameBoard.gameBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='player-ship-block--sunk'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Sunk Ship\n            </div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='player-ship-block--hit'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            >\n              Hit\n            </div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='player-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              data-shipnumber={block.ship.getShipNumber()}\n              onClick={props.removeShipFromBoard}\n            >\n              Ship\n            </div>\n          );\n        } else if (block.miss) {\n          return (\n            <div key={index} className='miss-block'>\n              Miss\n            </div>\n          );\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.placeChosenShip}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerBoard;\n","const DisplayComputerBoard = (props) => {\n  return (\n    <div id='board-wrapper__computer-board-wrapper'>\n      {props.computerBoardArray.map((block, index) => {\n        if (block.ship && block.sunk) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block--sunk'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            ></div>\n          );\n        } else if (block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block--hit'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n            ></div>\n          );\n        } else if (block.ship && !block.hit) {\n          return (\n            <div\n              key={index}\n              className='enemy-ship-block'\n              id={index}\n              data-x={props.setX(index)}\n              data-y={props.setY(index)}\n              onClick={props.playerAttackHandler}\n            ></div>\n          );\n        } else if (block.miss) {\n          return <div key={index} className='miss-block'></div>;\n        }\n        return (\n          <>\n            {!block.ship && (\n              <div\n                key={index}\n                className='empty-block'\n                id={index}\n                data-x={props.setX(index)}\n                data-y={props.setY(index)}\n                onClick={props.playerAttackHandler}\n              ></div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayComputerBoard;\n","const DisplayPlayerShipDock = (props) => {\n  return (\n    <div id='player-ships-wrapper'>\n      {props.player.playerShips.map((ship, index) => {\n        return (\n          <>\n            {ship.placed === false && (\n              <div\n                key={index}\n                className={\n                  'player-ships-wrapper__ship--' + ship.getOrientation()\n                }\n                data-shipnumber={index}\n                data-length={ship.getShipLength()}\n                data-orientation={ship.getOrientation()}\n                onClick={props.chooseShip}\n              >\n                <button\n                  className='ship__rotate-ship-button'\n                  onClick={props.rotateShip}\n                >\n                  Rotate\n                </button>\n                <>\n                  {ship.positions.map((position, index) => {\n                    return (\n                      <div\n                        key={index}\n                        className='player-ship-block--docked'\n                        id={index}\n                        data-x={props.setX(index)}\n                        data-y={props.setY(index)}\n                      ></div>\n                    );\n                  })}\n                </>\n              </div>\n            )}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DisplayPlayerShipDock;\n","import DisplayPlayerShipDock from './DisplayPlayerShipDock';\n\nconst PlayerShipDockContainer = (props) => {\n  return (\n    <DisplayPlayerShipDock\n      player={props.player}\n      setX={props.setX}\n      setY={props.setY}\n      chooseShip={props.chooseShip}\n      rotateShip={props.rotateShip}\n      mouseMove={props.mouseMove}\n    />\n  );\n};\n\nexport default PlayerShipDockContainer;\n","const DisplayPlacementError = (props) => {\n  return (\n    <div className='error-wrapper'>\n      Unable to place ship. Check for collision and available space.\n    </div>\n  );\n};\n\nexport default DisplayPlacementError;\n","const DisplayPlaceAllShipsError = (props) => {\n  return (\n    <div className='error-wrapper'>\n      Place all ships before starting the game.\n    </div>\n  );\n};\n\nexport default DisplayPlaceAllShipsError;\n","import DisplayPlayerBoard from './DisplayPlayerBoard';\nimport DisplayComputerBoard from './DisplayComputerBoard';\nimport PlayerShipDockContainer from './PlayerShipDockContainer';\nimport DisplayPlacementError from './DisplayPlacementError';\nimport DisplayPlaceAllShipsError from './DisplayPlaceAllShipsError';\n\nconst DisplayGame = (props) => {\n  //Used to set data values of the blocks\n  function setX(index) {\n    let x = index;\n    if (index > 9) {\n      return (x = index % 10);\n    } else {\n      return x;\n    }\n  }\n\n  //Same as above\n  //Thanks to 'cyborg/human#5133' on TOP Discord for the much cleaner version of this function!\n  function setY(index) {\n    let y = 9;\n    if (index > 89) {\n      return (y = 0);\n    } else {\n      const val = Math.floor(index / 10);\n      return (y = 9 - val);\n    }\n  }\n\n  return (\n    <div id='game-wrapper'>\n      <div id='header-wrapper'>\n        <h1>Battleship</h1>\n      </div>\n      <div id='board-wrapper'>\n        <DisplayPlayerBoard\n          player={props.player}\n          setX={setX}\n          setY={setY}\n          placeChosenShip={props.placeChosenShip}\n          removeShipFromBoard={props.removeShipFromBoard}\n          preparing={props.preparing}\n        />\n        {props.preparing && (\n          <>\n            {props.placementError && <DisplayPlacementError />}\n            {props.placeAllShipsError && <DisplayPlaceAllShipsError />}\n            <PlayerShipDockContainer\n              player={props.player}\n              setX={setX}\n              setY={setY}\n              chooseShip={props.chooseShip}\n              rotateShip={props.rotateShip}\n            />\n            <button id='start-game-button' onClick={props.startGame}>\n              Start game\n            </button>\n          </>\n        )}\n        {!props.preparing && (\n          <>\n            {props.playerTurn ? (\n              <h2 className='turn-display'>Player turn</h2>\n            ) : (\n              <h2 className='turn-display'>Computer turn</h2>\n            )}\n            <DisplayComputerBoard\n              computerBoardArray={props.computer.gameBoard.gameBoardArray}\n              setX={setX}\n              setY={setY}\n              playerAttackHandler={props.playerAttackHandler}\n              placeChosenShip={props.placeChosenShip}\n            />\n          </>\n        )}\n      </div>\n      {props.gameOver && (\n        <>\n          {props.playerWins && <div>You win!</div>}\n          {!props.playerWins && <div>You lose!</div>}\n          <button onClick={props.restartGame}>Restart</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default DisplayGame;\n","import playerFactory from './playerFactory';\nimport DisplayGame from './DisplayGame';\nimport { useEffect, useState } from 'react';\n\nconst GameLogicContainer = (props) => {\n  const [player, setPlayer] = useState(playerFactory('Player'));\n  const [computer, setComputer] = useState(playerFactory('Computer'));\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [hitPlayerBlocks, setHitPlayerBlocks] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [preparing, setPreparing] = useState(true);\n  const [placingShip, setPlacingShip] = useState(false);\n  const [chosenShip, setChosenShip] = useState();\n  const [shipNumber, setShipNumber] = useState(0);\n  const [placementError, setPlacementError] = useState(false);\n  const [placeAllShipsError, setPlaceAllShipsError] = useState(false);\n  const [playerWins, setPlayerWins] = useState();\n\n  function playerAttackHandler(e) {\n    if (playerTurn && !preparing && !gameOver) {\n      setComputer((prevState) => {\n        prevState.gameBoard.receiveAttack(\n          e.target.id,\n          parseInt(e.target.getAttribute('data-x')),\n          parseInt(e.target.getAttribute('data-y'))\n        );\n        setPlayerTurn(false);\n        return { ...prevState };\n      });\n    }\n  }\n\n  function chooseShip(e) {\n    if (!placingShip) {\n      const chosenShip = {\n        shipLength: parseInt(e.target.getAttribute('data-length')),\n        orientation: e.target.getAttribute('data-orientation'),\n      };\n      setPlacingShip(true);\n      setShipNumber(parseInt(e.target.getAttribute('data-shipnumber')));\n      setChosenShip(chosenShip);\n      e.target.className += '--selected';\n    }\n  }\n\n  function placeChosenShip(e) {\n    if (placingShip) {\n      setPlayer((prevState) => {\n        const targetBlockX = parseInt(e.target.getAttribute('data-x'));\n        const targetBlockY = parseInt(e.target.getAttribute('data-y'));\n        let placedShip = prevState.gameBoard.placeShip(\n          targetBlockX,\n          targetBlockY,\n          chosenShip.shipLength,\n          chosenShip.orientation,\n          shipNumber\n        );\n        if (placedShip === true) {\n          player.playerShips[shipNumber].placed = true;\n          setPlacementError(false);\n          setPlacingShip(false);\n        } else {\n          setPlacementError(true);\n        }\n        return { ...prevState };\n      });\n    }\n  }\n\n  function removeShipFromBoard(e) {\n    if (preparing && !placingShip) {\n      setPlayer((prevState) => {\n        const targetShip = parseInt(e.target.getAttribute('data-shipnumber'));\n        const blockId = parseInt(e.target.id);\n        player.playerShips[targetShip].placed = false;\n        player.gameBoard.removeShip(targetShip, blockId);\n        return { ...prevState };\n      });\n    }\n  }\n\n  function rotateShip(e) {\n    e.stopPropagation();\n    if (!placingShip) {\n      const targetShipNumber = e.target.parentNode.getAttribute(\n        'data-shipnumber'\n      );\n      const orientation = e.target.parentNode.getAttribute('data-orientation');\n\n      orientation === 'horizontal'\n        ? setPlayer((prevState) => {\n            prevState.rotateHorizontalShip(targetShipNumber);\n            return { ...prevState };\n          })\n        : setPlayer((prevState) => {\n            prevState.rotateVerticalShip(targetShipNumber);\n            return { ...prevState };\n          });\n    }\n  }\n\n  function startGame() {\n    const playerShips = [];\n\n    player.gameBoard.gameBoardArray.forEach((arrayItem) => {\n      if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n        playerShips.push(arrayItem.ship);\n      }\n    });\n    if (preparing && playerShips.length === 5) {\n      computer.gameBoard.placeComputerShips();\n      setPreparing(false);\n      setPlaceAllShipsError(false);\n    } else {\n      setPlaceAllShipsError(true);\n    }\n  }\n\n  function restartGame() {\n    setPreparing(true);\n    setPlayerTurn(true);\n    setHitPlayerBlocks([]);\n    setGameOver(false);\n    setPlayerWins('');\n    setPlayer(playerFactory('Player'));\n    setComputer(playerFactory('Computer'));\n  }\n\n  //The computer takes a turn whenever playerTurn changes (ie. whenever attacked)\n  useEffect(() => {\n    function computerAttack() {\n      let position = 0;\n\n      //Choose a random position to attack\n      function getPosition() {\n        return (position = Math.floor(Math.random() * 100));\n      }\n      setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n\n      //Prevents repeat hits\n      while (\n        hitPlayerBlocks.includes(position) &&\n        hitPlayerBlocks.length < 100\n      ) {\n        setHitPlayerBlocks([...hitPlayerBlocks, getPosition()]);\n      }\n\n      setPlayer((prevState) => {\n        prevState.gameBoard.receiveAttack(\n          position,\n          parseInt(prevState.gameBoard.gameBoardArray[position].x),\n          parseInt(prevState.gameBoard.gameBoardArray[position].y)\n        );\n        return { ...prevState };\n      });\n\n      setPlayerTurn(true);\n    }\n    if (!playerTurn) {\n      //Timeout used to give the computer some fake thinking time\n      setTimeout(function () {\n        computerAttack();\n      }, 500);\n    }\n    // eslint-disable-next-line\n  }, [playerTurn]);\n\n  //Checks for game over\n  useEffect(() => {\n    if (!preparing) {\n      const computerShips = [];\n      const playerShips = [];\n      computer.gameBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !computerShips.includes(arrayItem.ship)) {\n          computerShips.push(arrayItem.ship);\n        }\n      });\n\n      player.gameBoard.gameBoardArray.forEach((arrayItem) => {\n        if (arrayItem.ship && !playerShips.includes(arrayItem.ship)) {\n          playerShips.push(arrayItem.ship);\n        }\n      });\n\n      if (computerShips.every((ship) => ship.isSunk())) {\n        setPlayerWins(true);\n        setGameOver(true);\n      }\n\n      if (playerShips.every((ship) => ship.isSunk())) {\n        setPlayerWins(false);\n        setGameOver(true);\n      }\n    }\n  }, [computer, preparing, player.gameBoard.gameBoardArray]);\n\n  return (\n    <DisplayGame\n      player={player}\n      computer={computer}\n      playerAttackHandler={playerAttackHandler}\n      chooseShip={chooseShip}\n      placeChosenShip={placeChosenShip}\n      rotateShip={rotateShip}\n      preparing={preparing}\n      startGame={startGame}\n      playerTurn={playerTurn}\n      restartGame={restartGame}\n      removeShipFromBoard={removeShipFromBoard}\n      placementError={placementError}\n      placeAllShipsError={placeAllShipsError}\n      playerWins={playerWins}\n      gameOver={gameOver}\n    />\n  );\n};\n\nexport default GameLogicContainer;\n","import GameLogicContainer from './components/GameLogicContainer';\nimport './styles/reset.css';\nimport './styles/main.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <GameLogicContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}